(this["webpackJsonpreact-ps"]=this["webpackJsonpreact-ps"]||[]).push([[0],[,,,function(e,r,n){"use strict";n.d(r,"a",(function(){return a}));var t=n(0);var a=function(e){var r=e.htmlFor,n=e.label,a=e.required;return Object(t.jsxs)("label",{style:{display:"block"},htmlFor:r,children:[n,a&&Object(t.jsx)("span",{style:{color:"red"},children:" *"})]})}},,,function(e,r,n){"use strict";n.d(r,"a",(function(){return l}));var t=n(2),a=n(5),o=n(3),i=n(0);var l=function(e){var r=e.htmlId,n=e.name,l=e.label,s=e.type,p=void 0===s?"text":s,u=e.required,d=void 0!==u&&u,c=e.onChange,m=e.onBlur,h=e.placeholder,g=e.value,y=e.error,b=e.children,f=Object(a.a)(e,["htmlId","name","label","type","required","onChange","onBlur","placeholder","value","error","children"]);return Object(i.jsxs)("div",{style:{marginBottom:16},children:[Object(i.jsx)(o.a,{htmlFor:r,label:l,required:d}),Object(i.jsx)("input",Object(t.a)({id:r,type:p,name:n,placeholder:h,value:g,onChange:c,onBlur:m,style:y&&{border:"solid 1px red"}},f)),b,y&&Object(i.jsx)("div",{className:"error",style:{color:"red"},children:y})]})}},function(e,r,n){"use strict";function t(e,r){return parseInt(r*(e/100),10)}n.d(r,"a",(function(){return i}));var a=n(0);function o(e){var r=e.percent,n=e.width,o=e.height;return Object(a.jsx)("div",{style:{border:"solid 1px lightgray",width:n},children:Object(a.jsx)("div",{"aria-label":"width",style:{width:t(r,n),height:o,backgroundColor:function(e){return 100===e?"green":e>50?"lightgreen":"red"}(r)}})})}o.defaultProps={height:5};var i=o},,function(e,r,n){},,function(e,r,n){"use strict";n.d(r,"a",(function(){return a}));var t=n(0);var a=function(){return Object(t.jsx)("svg",{style:{width:20,height:20},xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 22 22",children:Object(t.jsxs)("g",{transform:"matrix(.02146 0 0 .02146 1 1)",fill:"#4d4d4d",children:[Object(t.jsx)("path",{d:"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1"}),Object(t.jsx)("circle",{cx:"466.08",cy:"466.02",r:"134.5"})]})})}},function(e,r,n){"use strict";n.d(r,"a",(function(){return c}));var t=n(2),a=n(4),o=n(5),i=n(11),l=n(6),s=n(7),p=n(1),u=n(0);function d(e){var r=e.htmlId,n=e.name,d=e.label,c=e.onChange,m=e.onBlur,h=e.placeholder,g=e.value,y=e.error,b=e.showVisibilityToggle,f=e.quality,x=(e.minLength,e.maxLength),j=Object(o.a)(e,["htmlId","name","label","onChange","onBlur","placeholder","value","error","showVisibilityToggle","quality","minLength","maxLength"]),v=Object(p.useState)(!1),I=Object(a.a)(v,2),T=I[0],q=I[1];return Object(u.jsxs)(l.a,Object(t.a)(Object(t.a)({htmlId:r,name:n,label:d,placeholder:h,type:T?"text":"password",onChange:c,onBlur:m,value:g,maxLength:x,error:y,required:!0},j),{},{children:[b&&Object(u.jsx)("a",{"aria-label":"toggle",onClick:function(){return q((function(e){return!e}))},style:{marginLeft:5},children:Object(u.jsx)(i.a,{})}),g.length>0&&f&&Object(u.jsx)(s.a,{percent:f,width:130})]}))}d.defaultProps={maxLength:50,showVisibilityToggle:!1,label:"Password",name:"default"};var c=d},,,function(e,r){e.exports=[{name:"EyeIcon",description:"SVG Eye Icon",code:'\r\n/** SVG Eye Icon */\r\nfunction EyeIcon() {\r\n    return (\r\n        <svg style={{ width: 20, height: 20 }} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 22 22">\r\n            <g transform="matrix(.02146 0 0 .02146 1 1)" fill="#4d4d4d">\r\n                <path d="m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1" />\r\n                <circle cx="466.08" cy="466.02" r="134.5" />\r\n            </g></svg>\r\n    )\r\n}\r\n\r\nexport default EyeIcon;',examples:[{name:"ExampleEyeIcon",description:"",code:'import EyeIcon from "ps-react/EyeIcon";\r\n\r\nfunction ExampleEyeIcon() {\r\n    return <EyeIcon />\r\n}\r\n\r\nexport default ExampleEyeIcon;'}]},{name:"HelloWorld",description:"",props:{message:{type:{name:"string"},required:!1,description:"Message to display",defaultValue:{value:"'World'",computed:!1}}},code:"import PropTypes from \"prop-types\"\r\n\r\nfunction HelloWord({ message }) {\r\n    return <div>{message}</div>\r\n}\r\n\r\nHelloWord.propTypes = {\r\n    /** Message to display */\r\n    message: PropTypes.string\r\n};\r\n\r\nHelloWord.defaultProps = {\r\n    message: 'World'\r\n}\r\nexport default HelloWord;",examples:[{name:"ExampleHelloWorld",description:"Custom HelloWorld Usings",code:'import HelloWord from "ps-react/HelloWorld";\r\n\r\n/** Custom HelloWorld Usings */\r\nfunction ExampleHelloWorld() {\r\n    return <HelloWord message="PluralSight viewers" />\r\n}\r\n\r\nexport default ExampleHelloWorld;'}]},{name:"Label",description:"Label with required field display,htmlFor,and block styling",props:{htmlFor:{type:{name:"string"},required:!0,description:"HTML ID for associated input"},label:{type:{name:"string"},required:!0,description:"Label text"},required:{type:{name:"bool"},required:!1,description:"Display asterisk after label if true"}},code:"import PropTypes from \"prop-types\";\r\n\r\n\r\n/** Label with required field display,htmlFor,and block styling */\r\nfunction Label({ htmlFor, label, required }) {\r\n    return (\r\n        <label\r\n            style={{\r\n                display: 'block'\r\n            }}\r\n            htmlFor={htmlFor}\r\n        >\r\n            {label}\r\n            {required && <span style={{ color: 'red' }}> *</span>}\r\n        </label>\r\n    )\r\n}\r\n\r\nLabel.propTypes = {\r\n    /** HTML ID for associated input */\r\n    htmlFor: PropTypes.string.isRequired,\r\n\r\n    /** Label text */\r\n    label: PropTypes.string.isRequired,\r\n\r\n    /** Display asterisk after label if true */\r\n    required: PropTypes.bool\r\n}\r\n\r\nexport default Label;",examples:[{name:"ExampleOptional",description:"Optional Label",code:'import Label from "ps-react/Label";\r\n\r\n/** Optional Label */\r\nfunction ExampleOptional() {\r\n    return <Label htmlFor="test" label="test" />\r\n}\r\n\r\nexport default ExampleOptional;'},{name:"ExampleRequired",description:"Required Label",code:'import Label from "ps-react/Label";\r\n\r\n/** Required Label */\r\nfunction ExampleRequired() {\r\n    return <Label htmlFor="name" label="Name" required />\r\n}\r\n\r\n\r\nexport default ExampleRequired;'}]},{name:"PasswordInput",description:"",props:{htmlId:{type:{name:"string"},required:!0,description:"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},name:{type:{name:"string"},required:!1,description:"Input name. Recommend setting this to match object's property so a single change handler can be used.",defaultValue:{value:'"default"',computed:!1}},label:{type:{name:"string"},required:!1,description:"Input label",defaultValue:{value:"'Password'",computed:!1}},onChange:{type:{name:"func"},required:!0,description:"Function to call onChange"},placeholder:{type:{name:"string"},required:!1,description:"Placeholder to display when empty"},value:{type:{name:"any"},required:!1,description:"Value"},error:{type:{name:"string"},required:!1,description:"String to display when error occurs"},quality:{type:{name:"number"},required:!1,description:"Dislpay progressbar"},showVisibilityToggle:{type:{name:"bool"},required:!1,description:"",defaultValue:{value:"false",computed:!1}},maxLength:{type:{name:"number"},required:!1,description:"",defaultValue:{value:"50",computed:!1}},minLength:{type:{name:"number"},required:!1,description:""}},code:'import PropTypes from "prop-types";\r\nimport EyeIcon from "../EyeIcon";\r\nimport TextInput from "../TextInput";\r\nimport ProgressBar from "../ProgressBar";\r\nimport { useState } from "react";\r\n\r\nfunction PasswordInput({\r\n    htmlId,\r\n    name,\r\n    label,\r\n    onChange,\r\n    onBlur,\r\n    placeholder,\r\n    value,\r\n    error,\r\n    showVisibilityToggle,\r\n    quality,\r\n    minLength,\r\n    maxLength,\r\n    ...props\r\n}) {\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    function toggleShowPassword() {\r\n        return setShowPassword((prevState) => {\r\n            return !prevState\r\n        })\r\n    }\r\n\r\n    return (\r\n        <TextInput\r\n            htmlId={htmlId}\r\n            name={name}\r\n            label={label}\r\n            placeholder={placeholder}\r\n            type={showPassword ? \'text\' : \'password\'}\r\n            onChange={onChange}\r\n            onBlur={onBlur}\r\n            value={value}\r\n            maxLength={maxLength}\r\n            error={error}\r\n            required\r\n            {...props}\r\n        >\r\n            {showVisibilityToggle &&\r\n                <a\r\n                    onClick={toggleShowPassword}\r\n                    style={{ marginLeft: 5 }}\r\n                >\r\n                    <EyeIcon />\r\n                </a>\r\n            }\r\n            {<div>{showVisibilityToggle}</div>}\r\n            {\r\n                value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\r\n            }\r\n        </TextInput>\r\n    )\r\n}\r\n\r\nPasswordInput.propTypes = {\r\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n    htmlId: PropTypes.string.isRequired,\r\n\r\n    /** Input name. Recommend setting this to match object\'s property so a single change handler can be used. */\r\n    name: PropTypes.string.isRequired,\r\n\r\n    /** Input label */\r\n    label: PropTypes.string.isRequired,\r\n\r\n    /** Function to call onChange */\r\n    onChange: PropTypes.func.isRequired,\r\n\r\n    /** Placeholder to display when empty */\r\n    placeholder: PropTypes.string,\r\n\r\n    /** Value */\r\n    value: PropTypes.any,\r\n\r\n    /** String to display when error occurs */\r\n    error: PropTypes.string,\r\n\r\n    /** Dislpay progressbar */\r\n    quality: PropTypes.number,\r\n\r\n    showVisibilityToggle: PropTypes.bool,\r\n\r\n    maxLength: PropTypes.number,\r\n    minLength: PropTypes.number\r\n};\r\n\r\nPasswordInput.defaultProps = {\r\n    maxLength: 50,\r\n    showVisibilityToggle: false,\r\n    label: \'Password\',\r\n    name: "default"\r\n}\r\n\r\nexport default PasswordInput;',examples:[{name:"ExampleAllFeatures",description:"",code:'import PasswordInput from "ps-react/PasswordInput";\r\nimport { useState } from "react";\r\n\r\nfunction ExampleAllFeatures(props) {\r\n    const [pass, setPass] = useState(\'\');\r\n\r\n    function getQuality() {\r\n        const length = pass.length;\r\n        return length > 10 ? 100 : length * 10;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <PasswordInput\r\n                htmlId="pass-input-all-features"\r\n                name="password"\r\n                onChange={event => setPass(event.target.value)}\r\n                value={pass}\r\n                minLength={8}\r\n                placeholder="Enter Pass"\r\n                showVisibilityToggle\r\n                quality={getQuality()}\r\n                {...props}\r\n\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ExampleAllFeatures;'}]},{name:"ProgressBar",description:"",props:{percent:{type:{name:"number"},required:!0,description:"Percent of progress completed"},width:{type:{name:"number"},required:!0,description:"Bar Width"},height:{type:{name:"number"},required:!1,description:"Bar Height",defaultValue:{value:"5",computed:!1}}},code:"import PropTypes from \"prop-types\";\r\n\r\nfunction ProgressBar({ percent, width, height }) {\r\n\r\n    function getColor(percent) {\r\n        if (percent === 100) return 'green';\r\n        return percent > 50 ? 'lightgreen' : 'red';\r\n    }\r\n\r\n    function getWidthAsPercentOfTotalWidth() {\r\n        return parseInt(width * (percent / 100), 10);\r\n    }\r\n\r\n    return (\r\n        <div style={{ border: 'solid 1px lightgray', width: width }}>\r\n            <div\r\n                style={{\r\n                    width: getWidthAsPercentOfTotalWidth(),\r\n                    height,\r\n                    backgroundColor: getColor(percent)\r\n                }}\r\n            >\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nProgressBar.propTypes = {\r\n    /** Percent of progress completed */\r\n    percent: PropTypes.number.isRequired,\r\n\r\n    /** Bar Width */\r\n    width: PropTypes.number.isRequired,\r\n\r\n    /** Bar Height */\r\n    height: PropTypes.number\r\n}\r\n\r\nProgressBar.defaultProps = {\r\n    height: 5\r\n}\r\n\r\nexport default ProgressBar;",examples:[{name:"Example10Percent",description:"20% Progress",code:'import ProgressBar from "ps-react/ProgressBar";\r\n\r\n/** 20% Progress */\r\nfunction Example10Percent() {\r\n    return <ProgressBar width={150} percent={20} />\r\n}\r\n\r\nexport default Example10Percent;'},{name:"Example70Percent",description:"70% Progress",code:'import ProgressBar from "ps-react/ProgressBar";\r\n\r\n\r\n/** 70% Progress */\r\nfunction Example70Percent() {\r\n    return <ProgressBar width={150} percent={70} />\r\n}\r\n\r\nexport default Example70Percent;'}]},{name:"RegistrationForm",description:"",props:{confirmationMessage:{type:{name:"string"},required:!1,description:"Message displayed upon successfull",defaultValue:{value:"'Thanks For Registration !'",computed:!1}},onSubmit:{type:{name:"func"},required:!0,description:"Called from submitted"},minPasswordLength:{type:{name:"number"},required:!1,description:"Min password length",defaultValue:{value:"8",computed:!1}}},code:'import { useState } from "react";\r\nimport PasswordInput from "../PasswordInput";\r\nimport TextInput from "../TextInput";\r\nimport PropTypes, { func } from "prop-types";\r\n\r\nfunction RegistrationForm({\r\n    minPasswordLength = 8,\r\n    onSubmit,\r\n    confirmationMessage = \'Thanks For Registration !\'\r\n}) {\r\n    const [state, setState] = useState({\r\n        user: { email: \'\', password: \'\' },\r\n        errors: {},\r\n        submitted: false,\r\n        loading: false\r\n    });\r\n\r\n\r\n    function onChange(e) {\r\n        const user = state.user;\r\n        user[e.target.name] = e.target.value;\r\n\r\n        setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                user\r\n            }\r\n        });\r\n    }\r\n\r\n    function onBlur(e) {\r\n        return validate(state.user)\r\n    }\r\n\r\n    function passwordQuality(password) {\r\n        if (!password) return null;\r\n        if (password.length >= minPasswordLength) return 100;\r\n        const percentOfMinLength = parseInt(password.length / minPasswordLength * 100, 10);\r\n        return percentOfMinLength;\r\n    }\r\n\r\n    function validate({ email, password }) {\r\n        const errors = {};\r\n        if (email && email.length > 0) errors.email = \'Email required !\';\r\n        if (password && password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\r\n        setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                errors\r\n            }\r\n        });\r\n\r\n        const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\r\n        return formIsValid;\r\n    }\r\n\r\n    async function onSubmitted() {\r\n        setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                loading: true,\r\n            }\r\n        })\r\n        const { user } = state;\r\n        const formIsValid = validate(user);\r\n        if (formIsValid) {\r\n            await onSubmit(user);\r\n            setState(prevState => {\r\n                return {\r\n                    ...prevState,\r\n                    submitted: true,\r\n                }\r\n            })\r\n        }\r\n        setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                loading: false,\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        state.submitted\r\n            ? <h2>{confirmationMessage}</h2>\r\n            : <div>\r\n                <TextInput\r\n                    htmlId="registration-form-email"\r\n                    name="email"\r\n                    onChange={onChange}\r\n                    label="Email"\r\n                    onBlur={onBlur}\r\n                    value={state.user.email}\r\n                    error={state.errors.email}\r\n                    required\r\n                />\r\n\r\n                <PasswordInput\r\n                    htmlId="registration-form-password"\r\n                    name="password"\r\n                    value={state.user.password}\r\n                    onChange={onChange}\r\n                    onBlur={onBlur}\r\n                    quality={passwordQuality(state.user.password)}\r\n                    showVisibilityToggle\r\n                    maxLength={50}\r\n                    error={state.errors.password}\r\n                />\r\n\r\n                <input type="submit" value={state.loading ? `Loading....` : \'Register\'} onClick={onSubmitted} />\r\n\r\n            </div>\r\n\r\n\r\n\r\n    )\r\n\r\n}\r\n\r\nRegistrationForm.propTypes = {\r\n    /** Message displayed upon successfull */\r\n    confirmationMessage: PropTypes.string,\r\n    /** Called from submitted */\r\n    onSubmit: PropTypes.func.isRequired,\r\n    /** Min password length */\r\n    minPasswordLength: PropTypes.number\r\n}\r\n\r\nexport default RegistrationForm;',examples:[{name:"ExampleRegistrationForm",description:"",code:'import RegistrationForm from "ps-react/RegistrationForm/RegistrationForm";\r\n\r\nfunction ExampleRegistrationForm() {\r\n    async function register(user) {\r\n        return new Promise((resolve, rejected) => {\r\n            return setTimeout(resolve, 3000);\r\n        })\r\n    }\r\n    return <RegistrationForm onSubmit={register} />\r\n}\r\n\r\nexport default ExampleRegistrationForm;'}]},{name:"TextInput",description:"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.",props:{htmlId:{type:{name:"string"},required:!0,description:"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},name:{type:{name:"string"},required:!0,description:"Input name. Recommend setting this to match object's property so a single change handler can be used."},label:{type:{name:"string"},required:!0,description:"Input label"},type:{type:{name:"enum",value:[{value:"'text'",computed:!1},{value:"'number'",computed:!1},{value:"'password'",computed:!1}]},required:!1,description:"Input type",defaultValue:{value:'"text"',computed:!1}},required:{type:{name:"bool"},required:!1,description:"Mark label with asterisk if set to true",defaultValue:{value:"false",computed:!1}},onChange:{type:{name:"func"},required:!0,description:"Function to call onChange"},onBlur:{type:{name:"func"},required:!1,description:"Function to call onBlur"},placeholder:{type:{name:"string"},required:!1,description:"Placeholder to display when empty"},value:{type:{name:"any"},required:!1,description:"Value"},error:{type:{name:"string"},required:!1,description:"String to display when error occurs"},children:{type:{name:"node"},required:!1,description:"Child component to display next to the input"}},code:"import Label from \"ps-react/Label\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n//Exercise SelectInput CheckboxList .... yap\u0131lacak \r\n/*\r\n-Text area deste\u011fi ekle\r\n-Otomatik placeholder ekle\r\n-Validation Onblur ekle\r\n*/\r\n\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\r\nfunction TextInput({\r\n    htmlId,\r\n    name,\r\n    label,\r\n    type = \"text\",\r\n    required = false,\r\n    onChange,\r\n    onBlur,\r\n    placeholder,\r\n    value,\r\n    error,\r\n    children,\r\n    ...props\r\n}) {\r\n    return (\r\n        <div style={{ marginBottom: 16 }}>\r\n            <Label htmlFor={htmlId} label={label} required={required} />\r\n            <input\r\n                id={htmlId}\r\n                type={type}\r\n                name={name}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                style={error && { border: 'solid 1px red' }}\r\n                {...props}\r\n            />\r\n            {children}\r\n            {error && <div\r\n                className=\"error\"\r\n                style={{ color: 'red' }}\r\n            >{error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nTextInput.propTypes = {\r\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n    htmlId: PropTypes.string.isRequired,\r\n\r\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n    name: PropTypes.string.isRequired,\r\n\r\n    /** Input label */\r\n    label: PropTypes.string.isRequired,\r\n\r\n    /** Input type */\r\n    type: PropTypes.oneOf(['text', 'number', 'password']),\r\n\r\n    /** Mark label with asterisk if set to true */\r\n    required: PropTypes.bool,\r\n\r\n    /** Function to call onChange */\r\n    onChange: PropTypes.func.isRequired,\r\n\r\n    /** Function to call onBlur */\r\n    onBlur: PropTypes.func,\r\n\r\n    /** Placeholder to display when empty */\r\n    placeholder: PropTypes.string,\r\n\r\n    /** Value */\r\n    value: PropTypes.any,\r\n\r\n    /** String to display when error occurs */\r\n    error: PropTypes.string,\r\n\r\n    /** Child component to display next to the input */\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default TextInput;",examples:[{name:"ExampleError",description:"",code:'import TextInput from "ps-react/TextInput";\r\n\r\nfunction ExampleOptional() {\r\n    return (\r\n        <TextInput\r\n            htmlId="example optional"\r\n            label="First Name"\r\n            name="firstName"\r\n            required\r\n            error="First name is required"\r\n            onChange={() => { }}\r\n        />\r\n    )\r\n}\r\n\r\n//Exercise SelectInput CheckboxList .... yap\u0131lacak \r\n\r\nexport default ExampleOptional'},{name:"ExampleOptional",description:"",code:'import TextInput from "ps-react/TextInput";\r\n\r\nfunction ExampleOptional() {\r\n    return (\r\n        <TextInput\r\n            htmlId="example optional"\r\n            label="First Name"\r\n            name="firstName"\r\n            required\r\n            onChange={() => { }}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ExampleOptional'}]},{name:"TextInputBEM",description:"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.",props:{htmlId:{type:{name:"string"},required:!0,description:"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},name:{type:{name:"string"},required:!0,description:"Input name. Recommend setting this to match object's property so a single change handler can be used."},label:{type:{name:"string"},required:!0,description:"Input label"},type:{type:{name:"enum",value:[{value:"'text'",computed:!1},{value:"'number'",computed:!1},{value:"'password'",computed:!1}]},required:!1,description:"Input type",defaultValue:{value:'"text"',computed:!1}},required:{type:{name:"bool"},required:!1,description:"Mark label with asterisk if set to true",defaultValue:{value:"false",computed:!1}},onChange:{type:{name:"func"},required:!0,description:"Function to call onChange"},onBlur:{type:{name:"func"},required:!1,description:"Function to call onBlur"},placeholder:{type:{name:"string"},required:!1,description:"Placeholder to display when empty"},value:{type:{name:"any"},required:!1,description:"Value"},error:{type:{name:"string"},required:!1,description:"String to display when error occurs"},children:{type:{name:"node"},required:!1,description:"Child component to display next to the input"}},code:'import Label from "ps-react/Label";\r\nimport PropTypes from "prop-types";\r\n\r\n//Exercise SelectInput CheckboxList .... yap\u0131lacak \r\n/*\r\n-Text area deste\u011fi ekle\r\n-Otomatik placeholder ekle\r\n-Validation Onblur ekle\r\n*/\r\n\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\r\nfunction TextInputBEM({\r\n    htmlId,\r\n    name,\r\n    label,\r\n    type = "text",\r\n    required = false,\r\n    onChange,\r\n    onBlur,\r\n    placeholder,\r\n    value,\r\n    error,\r\n    children,\r\n    ...props\r\n}) {\r\n    return (\r\n        <div className="textinput">\r\n            <Label htmlFor={htmlId} label={label} required={required} />\r\n            <input\r\n                id={htmlId}\r\n                type={type}\r\n                name={name}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                className={error && \'textinput__input--state-error\'}\r\n                {...props}\r\n            />\r\n            {children}\r\n            {error &&\r\n                <div className="textinput__error"\r\n                >{error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nTextInputBEM.propTypes = {\r\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n    htmlId: PropTypes.string.isRequired,\r\n\r\n    /** Input name. Recommend setting this to match object\'s property so a single change handler can be used. */\r\n    name: PropTypes.string.isRequired,\r\n\r\n    /** Input label */\r\n    label: PropTypes.string.isRequired,\r\n\r\n    /** Input type */\r\n    type: PropTypes.oneOf([\'text\', \'number\', \'password\']),\r\n\r\n    /** Mark label with asterisk if set to true */\r\n    required: PropTypes.bool,\r\n\r\n    /** Function to call onChange */\r\n    onChange: PropTypes.func.isRequired,\r\n\r\n    /** Function to call onBlur */\r\n    onBlur: PropTypes.func,\r\n\r\n    /** Placeholder to display when empty */\r\n    placeholder: PropTypes.string,\r\n\r\n    /** Value */\r\n    value: PropTypes.any,\r\n\r\n    /** String to display when error occurs */\r\n    error: PropTypes.string,\r\n\r\n    /** Child component to display next to the input */\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default TextInputBEM;',examples:[{name:"ExampleTextInputBem",description:"With Error Text",code:'import TextInputBEM from "ps-react/TextInputBEM";\r\n\r\n/** With Error Text */\r\nfunction ExampleOptional() {\r\n    return (\r\n        <TextInputBEM\r\n            htmlId="example optional"\r\n            label="First Name"\r\n            name="firstName"\r\n            required\r\n            error="First name is required"\r\n            onChange={() => { }}\r\n        />\r\n    )\r\n}\r\n\r\n//Exercise SelectInput CheckboxList .... yap\u0131lacak \r\n\r\nexport default ExampleOptional'}]},{name:"TextInputCSSModules",description:"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.",props:{htmlId:{type:{name:"string"},required:!0,description:"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},name:{type:{name:"string"},required:!0,description:"Input name. Recommend setting this to match object's property so a single change handler can be used."},label:{type:{name:"string"},required:!0,description:"Input label"},type:{type:{name:"enum",value:[{value:"'text'",computed:!1},{value:"'number'",computed:!1},{value:"'password'",computed:!1}]},required:!1,description:"Input type",defaultValue:{value:'"text"',computed:!1}},required:{type:{name:"bool"},required:!1,description:"Mark label with asterisk if set to true",defaultValue:{value:"false",computed:!1}},onChange:{type:{name:"func"},required:!0,description:"Function to call onChange"},onBlur:{type:{name:"func"},required:!1,description:"Function to call onBlur"},placeholder:{type:{name:"string"},required:!1,description:"Placeholder to display when empty"},value:{type:{name:"any"},required:!1,description:"Value"},error:{type:{name:"string"},required:!1,description:"String to display when error occurs"},children:{type:{name:"node"},required:!1,description:"Child component to display next to the input"}},code:'import Label from "ps-react/Label";\r\nimport PropTypes from "prop-types";\r\nimport styles from "./textInput.css";\r\n//Exercise SelectInput CheckboxList .... yap\u0131lacak \r\n/*\r\n-Text area deste\u011fi ekle\r\n-Otomatik placeholder ekle\r\n-Validation Onblur ekle\r\n*/\r\n\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\r\nfunction TextInputCSSModules({\r\n    htmlId,\r\n    name,\r\n    label,\r\n    type = "text",\r\n    required = false,\r\n    onChange,\r\n    onBlur,\r\n    placeholder,\r\n    value,\r\n    error,\r\n    children,\r\n    ...props\r\n}) {\r\n    console.log(styles)\r\n    return (\r\n        <div className={styles.fieldset}>\r\n            <Label htmlFor={htmlId} label={label} required={required} />\r\n            <input\r\n                id={htmlId}\r\n                type={type}\r\n                name={name}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                className={error && styles.inputError}\r\n                {...props}\r\n            />\r\n            {children}\r\n            {error && <div\r\n                className={styles.error}\r\n            >{error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nTextInputCSSModules.propTypes = {\r\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n    htmlId: PropTypes.string.isRequired,\r\n\r\n    /** Input name. Recommend setting this to match object\'s property so a single change handler can be used. */\r\n    name: PropTypes.string.isRequired,\r\n\r\n    /** Input label */\r\n    label: PropTypes.string.isRequired,\r\n\r\n    /** Input type */\r\n    type: PropTypes.oneOf([\'text\', \'number\', \'password\']),\r\n\r\n    /** Mark label with asterisk if set to true */\r\n    required: PropTypes.bool,\r\n\r\n    /** Function to call onChange */\r\n    onChange: PropTypes.func.isRequired,\r\n\r\n    /** Function to call onBlur */\r\n    onBlur: PropTypes.func,\r\n\r\n    /** Placeholder to display when empty */\r\n    placeholder: PropTypes.string,\r\n\r\n    /** Value */\r\n    value: PropTypes.any,\r\n\r\n    /** String to display when error occurs */\r\n    error: PropTypes.string,\r\n\r\n    /** Child component to display next to the input */\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default TextInputCSSModules;',examples:[{name:"ExampleCSS",description:"",code:'import TextInputCSSModules from "ps-react/TextInputCSSModules";\r\n\r\nfunction ExampleCSS() {\r\n    return (\r\n        <TextInputCSSModules\r\n            htmlId="example optional"\r\n            label="First Name"\r\n            name="firstName"\r\n            required\r\n            error="First name is required"\r\n            onChange={() => { }}\r\n        />\r\n    )\r\n}\r\n\r\n//Exercise SelectInput CheckboxList .... yap\u0131lacak \r\n\r\nexport default ExampleCSS'}]},{name:"TextInputStyledComponent",description:"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.",props:{htmlId:{type:{name:"string"},required:!0,description:"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},name:{type:{name:"string"},required:!0,description:"Input name. Recommend setting this to match object's property so a single change handler can be used."},label:{type:{name:"string"},required:!0,description:"Input label"},type:{type:{name:"enum",value:[{value:"'text'",computed:!1},{value:"'number'",computed:!1},{value:"'password'",computed:!1}]},required:!1,description:"Input type",defaultValue:{value:'"text"',computed:!1}},required:{type:{name:"bool"},required:!1,description:"Mark label with asterisk if set to true",defaultValue:{value:"false",computed:!1}},onChange:{type:{name:"func"},required:!0,description:"Function to call onChange"},onBlur:{type:{name:"func"},required:!1,description:"Function to call onBlur"},placeholder:{type:{name:"string"},required:!1,description:"Placeholder to display when empty"},value:{type:{name:"any"},required:!1,description:"Value"},error:{type:{name:"string"},required:!1,description:"String to display when error occurs"},children:{type:{name:"node"},required:!1,description:"Child component to display next to the input"}},code:'import Label from "ps-react/Label";\r\nimport PropTypes from "prop-types";\r\nimport styled from "styled-components";\r\n\r\n//Exercise SelectInput CheckboxList .... yap\u0131lacak \r\n/*\r\n-Text area deste\u011fi ekle\r\n-Otomatik placeholder ekle\r\n-Validation Onblur ekle\r\n*/\r\n\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\r\nfunction TextInputStyledComponent({\r\n    htmlId,\r\n    name,\r\n    label,\r\n    type = "text",\r\n    required = false,\r\n    onChange,\r\n    onBlur,\r\n    placeholder,\r\n    value,\r\n    error,\r\n    children,\r\n    ...props\r\n}) {\r\n    const Error = styled.div`\r\n      color:red;\r\n    `;\r\n    const Input = styled.input`\r\n        border: ${error && \'solid 1px red \'};\r\n    `;\r\n    const Fieldset = styled.div`\r\n       margin-bottom: 16px;\r\n    `;\r\n\r\n\r\n    return (\r\n        <Fieldset>\r\n            <Label htmlFor={htmlId} label={label} required={required} />\r\n            <Input\r\n                id={htmlId}\r\n                type={type}\r\n                name={name}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                {...props}\r\n            />\r\n            {children}\r\n            {error && <Error\r\n                className="error"\r\n\r\n            >{error}</Error>}\r\n        </Fieldset>\r\n    )\r\n}\r\n\r\nTextInputStyledComponent.propTypes = {\r\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n    htmlId: PropTypes.string.isRequired,\r\n\r\n    /** Input name. Recommend setting this to match object\'s property so a single change handler can be used. */\r\n    name: PropTypes.string.isRequired,\r\n\r\n    /** Input label */\r\n    label: PropTypes.string.isRequired,\r\n\r\n    /** Input type */\r\n    type: PropTypes.oneOf([\'text\', \'number\', \'password\']),\r\n\r\n    /** Mark label with asterisk if set to true */\r\n    required: PropTypes.bool,\r\n\r\n    /** Function to call onChange */\r\n    onChange: PropTypes.func.isRequired,\r\n\r\n    /** Function to call onBlur */\r\n    onBlur: PropTypes.func,\r\n\r\n    /** Placeholder to display when empty */\r\n    placeholder: PropTypes.string,\r\n\r\n    /** Value */\r\n    value: PropTypes.any,\r\n\r\n    /** String to display when error occurs */\r\n    error: PropTypes.string,\r\n\r\n    /** Child component to display next to the input */\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default TextInputStyledComponent;',examples:[{name:"ExampleStyledComponent",description:"",code:'import TextInputStyledComponent from "ps-react/TextInputStyledComponent";\r\n\r\nfunction ExampleStyled() {\r\n    return (\r\n        <TextInputStyledComponent\r\n            htmlId="example-optional"\r\n            label="First Name"\r\n            name="firstName"\r\n            required\r\n            error="First name is required"\r\n            onChange={() => { }}\r\n        />\r\n    )\r\n}\r\n\r\n//Exercise SelectInput CheckboxList .... yap\u0131lacak \r\n\r\nexport default ExampleStyled'}]}]},,,,,,function(e,r,n){"use strict";n.r(r);var t=n(11),a=n(0);r.default=function(){return Object(a.jsx)(t.a,{})}},function(e,r,n){"use strict";n.r(r);var t=n(3),a=n(0);r.default=function(){return Object(a.jsx)(t.a,{htmlFor:"test",label:"test"})}},function(e,r,n){"use strict";n.r(r);var t=n(3),a=n(0);r.default=function(){return Object(a.jsx)(t.a,{htmlFor:"name",label:"Name",required:!0})}},function(e,r,n){"use strict";n.r(r);var t=n(2),a=n(4),o=n(12),i=n(1),l=n(0);r.default=function(e){var r=Object(i.useState)(""),n=Object(a.a)(r,2),s=n[0],p=n[1];return Object(l.jsx)("div",{children:Object(l.jsx)(o.a,Object(t.a)({htmlId:"pass-input-all-features",name:"password",onChange:function(e){return p(e.target.value)},value:s,minLength:8,placeholder:"Enter Pass",showVisibilityToggle:!0,quality:function(){var e=s.length;return e>10?100:10*e}()},e))})}},function(e,r,n){"use strict";n.r(r);var t=n(7),a=n(0);r.default=function(){return Object(a.jsx)(t.a,{width:150,percent:20})}},function(e,r,n){"use strict";n.r(r);var t=n(7),a=n(0);r.default=function(){return Object(a.jsx)(t.a,{width:150,percent:70})}},function(e,r,n){"use strict";n.r(r);var t=n(6),a=n(0);r.default=function(){return Object(a.jsx)(t.a,{htmlId:"example optional",label:"First Name",name:"firstName",required:!0,error:"First name is required",onChange:function(){}})}},function(e,r,n){"use strict";n.r(r);var t=n(6),a=n(0);r.default=function(){return Object(a.jsx)(t.a,{htmlId:"example optional",label:"First Name",name:"firstName",required:!0,onChange:function(){}})}},function(e,r,n){"use strict";n.r(r);var t=n(0);function a(e){var r=e.message;return Object(t.jsx)("div",{children:r})}a.defaultProps={message:"World"};var o=a;r.default=function(){return Object(t.jsx)(o,{message:"PluralSight viewers"})}},function(e,r,n){"use strict";n.r(r);n(47);var t=n(2),a=n(5),o=n(3),i=n(0);var l=function(e){var r=e.htmlId,n=e.name,l=e.label,s=e.type,p=void 0===s?"text":s,u=e.required,d=void 0!==u&&u,c=e.onChange,m=e.onBlur,h=e.placeholder,g=e.value,y=e.error,b=e.children,f=Object(a.a)(e,["htmlId","name","label","type","required","onChange","onBlur","placeholder","value","error","children"]);return Object(i.jsxs)("div",{className:"textinput",children:[Object(i.jsx)(o.a,{htmlFor:r,label:l,required:d}),Object(i.jsx)("input",Object(t.a)({id:r,type:p,name:n,placeholder:h,value:g,onChange:c,onBlur:m,className:y&&"textinput__input--state-error"},f)),b,y&&Object(i.jsx)("div",{className:"textinput__error",children:y})]})};r.default=function(){return Object(i.jsx)(l,{htmlId:"example optional",label:"First Name",name:"firstName",required:!0,error:"First name is required",onChange:function(){}})}},function(e,r,n){"use strict";n.r(r);var t=n(2),a=n(5),o=n(3),i=n(9),l=n.n(i),s=n(0);var p=function(e){var r=e.htmlId,n=e.name,i=e.label,p=e.type,u=void 0===p?"text":p,d=e.required,c=void 0!==d&&d,m=e.onChange,h=e.onBlur,g=e.placeholder,y=e.value,b=e.error,f=e.children,x=Object(a.a)(e,["htmlId","name","label","type","required","onChange","onBlur","placeholder","value","error","children"]);return console.log(l.a),Object(s.jsxs)("div",{className:l.a.fieldset,children:[Object(s.jsx)(o.a,{htmlFor:r,label:i,required:c}),Object(s.jsx)("input",Object(t.a)({id:r,type:u,name:n,placeholder:g,value:y,onChange:m,onBlur:h,className:b&&l.a.inputError},x)),f,b&&Object(s.jsx)("div",{className:l.a.error,children:b})]})};r.default=function(){return Object(s.jsx)(p,{htmlId:"example optional",label:"First Name",name:"firstName",required:!0,error:"First name is required",onChange:function(){}})}},function(e,r,n){"use strict";n.r(r);var t,a,o,i=n(2),l=n(13),s=n(5),p=n(3),u=n(14),d=n(0);var c=function(e){var r=e.htmlId,n=e.name,c=e.label,m=e.type,h=void 0===m?"text":m,g=e.required,y=void 0!==g&&g,b=e.onChange,f=e.onBlur,x=e.placeholder,j=e.value,v=e.error,I=e.children,T=Object(s.a)(e,["htmlId","name","label","type","required","onChange","onBlur","placeholder","value","error","children"]),q=u.a.div(t||(t=Object(l.a)(["\n      color:red;\n    "]))),w=u.a.input(a||(a=Object(l.a)(["\n        border: ",";\n    "])),v&&"solid 1px red "),P=u.a.div(o||(o=Object(l.a)(["\n       margin-bottom: 16px;\n    "])));return Object(d.jsxs)(P,{children:[Object(d.jsx)(p.a,{htmlFor:r,label:c,required:y}),Object(d.jsx)(w,Object(i.a)({id:r,type:h,name:n,placeholder:x,value:j,onChange:b,onBlur:f},T)),I,v&&Object(d.jsx)(q,{className:"error",children:v})]})};r.default=function(){return Object(d.jsx)(c,{htmlId:"example-optional",label:"First Name",name:"firstName",required:!0,error:"First name is required",onChange:function(){}})}},function(e,r,n){"use strict";n.r(r);var t=n(8),a=n.n(t),o=n(10),i=n(2),l=n(4),s=n(1),p=n(12),u=n(6),d=n(0);var c=function(e){var r,n=e.minPasswordLength,t=void 0===n?8:n,c=e.onSubmit,m=e.confirmationMessage,h=void 0===m?"Thanks For Registration !":m,g=Object(s.useState)({user:{email:"",password:""},errors:{},submitted:!1,loading:!1}),y=Object(l.a)(g,2),b=y[0],f=y[1];function x(e){var r=b.user;r[e.target.name]=e.target.value,f((function(e){return Object(i.a)(Object(i.a)({},e),{},{user:r})}))}function j(e){return v(b.user)}function v(e){var r=e.email,n=e.password,a={};return r&&r.length>0&&(a.email="Email required !"),n&&n.length<t&&(a.password="Password must be at least ".concat(t," characters.")),f((function(e){return Object(i.a)(Object(i.a)({},e),{},{errors:a})})),0===Object.getOwnPropertyNames(a).length}function I(){return(I=Object(o.a)(a.a.mark((function e(){var r;return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(f((function(e){return Object(i.a)(Object(i.a)({},e),{},{loading:!0})})),r=b.user,!v(r)){e.next=7;break}return e.next=6,c(r);case 6:f((function(e){return Object(i.a)(Object(i.a)({},e),{},{submitted:!0})}));case 7:f((function(e){return Object(i.a)(Object(i.a)({},e),{},{loading:!1})}));case 8:case"end":return e.stop()}}),e)})))).apply(this,arguments)}return b.submitted?Object(d.jsx)("h2",{children:h}):Object(d.jsxs)("div",{children:[Object(d.jsx)(u.a,{htmlId:"registration-form-email",name:"email",onChange:x,label:"Email",onBlur:j,value:b.user.email,error:b.errors.email,required:!0}),Object(d.jsx)(p.a,{htmlId:"registration-form-password",name:"password",value:b.user.password,onChange:x,onBlur:j,quality:(r=b.user.password,r?r.length>=t?100:parseInt(r.length/t*100,10):null),showVisibilityToggle:!0,maxLength:50,error:b.errors.password}),Object(d.jsx)("input",{type:"submit",value:b.loading?"Loading....":"Register",onClick:function(){return I.apply(this,arguments)}})]})};r.default=function(){function e(){return(e=Object(o.a)(a.a.mark((function e(r){return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise((function(e,r){return setTimeout(e,3e3)})));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}return Object(d.jsx)(c,{onSubmit:function(r){return e.apply(this,arguments)}})}},,,,,,,,,,function(e,r,n){},,function(e,r,n){var t={"./EyeIcon/ExampleEyeIcon":21,"./EyeIcon/ExampleEyeIcon.js":21,"./HelloWorld/ExampleHelloWorld":29,"./HelloWorld/ExampleHelloWorld.js":29,"./Label/ExampleOptional":22,"./Label/ExampleOptional.js":22,"./Label/ExampleRequired":23,"./Label/ExampleRequired.js":23,"./PasswordInput/ExampleAllFeatures":24,"./PasswordInput/ExampleAllFeatures.js":24,"./ProgressBar/Example10Percent":25,"./ProgressBar/Example10Percent.js":25,"./ProgressBar/Example70Percent":26,"./ProgressBar/Example70Percent.js":26,"./RegistrationForm/ExampleRegistrationForm":33,"./RegistrationForm/ExampleRegistrationForm.js":33,"./TextInput/ExampleError":27,"./TextInput/ExampleError.js":27,"./TextInput/ExampleOptional":28,"./TextInput/ExampleOptional.js":28,"./TextInputBEM/ExampleTextInputBem":30,"./TextInputBEM/ExampleTextInputBem.js":30,"./TextInputCSSModules/ExampleCSS":31,"./TextInputCSSModules/ExampleCSS.js":31,"./TextInputStyledComponent/ExampleStyledComponent":32,"./TextInputStyledComponent/ExampleStyledComponent.js":32};function a(e){var r=o(e);return n(r)}function o(e){if(!n.o(t,e)){var r=new Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}return t[e]}a.keys=function(){return Object.keys(t)},a.resolve=o,e.exports=a,a.id=45},,function(e,r,n){},,,,,,function(e,r,n){"use strict";n.r(r);var t=n(1),a=n.n(t),o=n(34),i=n.n(o),l=(n(43),n(4)),s=n(0);var p=function(e){var r=e.components;return Object(s.jsx)("ul",{className:"navigation",children:r.map((function(e){return Object(s.jsx)("li",{children:Object(s.jsx)("a",{href:"#".concat(e),children:e})},e)}))})},u=n(17),d=n.n(u),c=n(35),m=n.n(c);function h(e){return Object(t.useEffect)((function(){d.a.registerLanguage("javascript",m.a),d.a.highlightBlock(h)}),[]),Object(s.jsx)("pre",{ref:function(e){h=e},children:Object(s.jsx)("code",{children:e.children})})}var g=h;var y=function(e){var r=Object(t.useState)(!1),a=Object(l.a)(r,2),o=a[0],i=a[1],p=e.example,u=p.code,d=p.description,c=p.name,m=n(45)("./".concat(e.componentName,"/").concat(c)).default;return Object(s.jsxs)("div",{className:"example",children:[d&&Object(s.jsx)("h4",{children:d}),Object(s.jsx)(m,{}),Object(s.jsx)("p",{children:Object(s.jsxs)("a",{href:"",onClick:function(e){e.preventDefault(),i((function(){return!o}))},children:[o?"Hide":"Show"," Code"]})}),o&&Object(s.jsx)(g,{children:u})]})};var b=function(e){var r=e.props;return Object(s.jsxs)("table",{className:"props",children:[Object(s.jsx)("thead",{children:Object(s.jsxs)("tr",{children:[Object(s.jsx)("th",{children:"Name"}),Object(s.jsx)("th",{children:"Description"}),Object(s.jsx)("th",{children:"Type"}),Object(s.jsx)("th",{children:"Default"}),Object(s.jsx)("th",{children:"Required"})]})}),Object(s.jsx)("tbody",{children:Object.keys(r).map((function(e){return Object(s.jsxs)("tr",{children:[Object(s.jsx)("td",{children:e}),Object(s.jsx)("td",{children:r[e].description}),Object(s.jsx)("td",{children:r[e].type.name}),Object(s.jsx)("td",{children:r[e].defaultValue&&r[e].defaultValue.value}),Object(s.jsx)("td",{children:r[e].required&&"X"})]},e)}))})]})};var f=function(e){var r=e.component,n=r.name,t=r.description,a=r.props,o=r.examples;return Object(s.jsxs)("div",{className:"componentpage",children:[Object(s.jsx)("h2",{children:n}),Object(s.jsx)("p",{children:t}),Object(s.jsxs)("h3",{children:["Example ",o.length>1&&"s"]}),o.length>0?o.map((function(e){return Object(s.jsx)(y,{example:e,componentName:n},e.code)})):"No examples exist.",Object(s.jsx)("h3",{children:"Props"}),a?Object(s.jsx)(b,{props:a}):"This component accepts no props."]})},x=n(15),j=n.n(x);var v=function(e){var r=Object(t.useState)(window.location.hash.substr(1)),n=Object(l.a)(r,2),a=n[0],o=n[1];function i(){return o((function(){return a=window.location.hash.substr(1)}))}Object(t.useEffect)((function(){return window.addEventListener("hashchange",i),function(){return window.removeEventListener("hashchange",i)}}),[a,i]);var u=a?j.a.filter((function(e){return e.name===a}))[0]:j.a[0];return Object(s.jsxs)("div",{children:[Object(s.jsx)(p,{components:j.a.map((function(e){return e.name}))}),Object(s.jsx)(f,{component:u})]})},I=function(e){e&&e instanceof Function&&n.e(3).then(n.bind(null,54)).then((function(r){var n=r.getCLS,t=r.getFID,a=r.getFCP,o=r.getLCP,i=r.getTTFB;n(e),t(e),a(e),o(e),i(e)}))};n(52);i.a.render(Object(s.jsx)(a.a.StrictMode,{children:Object(s.jsx)(v,{})}),document.getElementById("root")),I()}],[[53,1,2]]]);
//# sourceMappingURL=main.9bed900e.chunk.js.map