{"version":3,"sources":["components/Label/Label.js","components/TextInput/TextInput.js","utils/percentUtils.js","components/ProgressBar/ProgressBar.js","components/EyeIcon/EyeIcon.js","components/PasswordInput/PasswordInput.js","../config/componentData.js","docs/examples/EyeIcon/ExampleEyeIcon.js","docs/examples/Label/ExampleOptional.js","docs/examples/Label/ExampleRequired.js","docs/examples/PasswordInput/ExampleAllFeatures.js","docs/examples/ProgressBar/Example10Percent.js","docs/examples/ProgressBar/Example70Percent.js","docs/examples/TextInput/ExampleError.js","docs/examples/TextInput/ExampleOptional.js","components/HelloWorld/HelloWorld.js","docs/examples/HelloWorld/ExampleHelloWorld.js","components/TextInputBEM/TextInputBEM.js","docs/examples/TextInputBEM/ExampleTextInputBem.js","components/TextInputCSSModules/TextInputCSSModules.js","docs/examples/TextInputCSSModules/ExampleCSS.js","components/TextInputStyledComponent/TextInputStyledComponent.js","docs/examples/TextInputStyledComponent/ExampleStyledComponent.js","components/RegistrationForm/RegistrationForm.js","docs/examples/RegistrationForm/ExampleRegistrationForm.js","docs/examples sync /^/.*$","docs/Navigation.js","docs/CodeExample.js","docs/Example.js","docs/Props.js","docs/ComponentPage.js","docs/Docs.js","reportWebVitals.js","index.js"],"names":["Label","htmlFor","label","required","style","display","color","TextInput","htmlId","name","type","onChange","onBlur","placeholder","value","error","children","props","marginBottom","id","border","className","getWidthAsPercentOfTotalWidth","percent","totalWidth","parseInt","ProgressBar","width","height","aria-label","backgroundColor","getColor","defaultProps","EyeIcon","xmlns","viewBox","transform","fill","d","cx","cy","r","PasswordInput","showVisibilityToggle","quality","maxLength","minLength","useState","showPassword","setShowPassword","onClick","prevState","marginLeft","length","module","exports","ExampleEyeIcon","ExampleOptional","ExampleRequired","ExampleAllFeatures","pass","setPass","event","target","getQuality","Example10Percent","Example70Percent","HelloWord","message","ExampleHelloWorld","TextInputBEM","TextInputCSSModules","console","log","styles","fieldset","inputError","ExampleCSS","TextInputStyledComponent","Error","styled","div","Input","input","Fieldset","ExampleStyled","RegistrationForm","password","minPasswordLength","onSubmit","confirmationMessage","user","email","errors","submitted","loading","state","setState","e","validate","Object","getOwnPropertyNames","a","ExampleRegistrationForm","Promise","resolve","rejected","setTimeout","map","webpackContext","req","webpackContextResolve","__webpack_require__","o","code","keys","Navigation","components","href","CodeExample","useEffect","hljs","registerLanguage","javascript","highlightBlock","ref","Example","showCode","setShowCode","example","description","ExampleComponent","require","componentName","default","preventDefault","Props","key","defaultValue","ComponentPage","component","examples","Docs","window","location","hash","substr","route","setRoute","routeControl","addEventListener","removeEventListener","componentData","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9bed900e.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\n\r\n\r\n/** Label with required field display,htmlFor,and block styling */\r\nfunction Label({ htmlFor, label, required }) {\r\n    return (\r\n        <label\r\n            style={{\r\n                display: 'block'\r\n            }}\r\n            htmlFor={htmlFor}\r\n        >\r\n            {label}\r\n            {required && <span style={{ color: 'red' }}> *</span>}\r\n        </label>\r\n    )\r\n}\r\n\r\nLabel.propTypes = {\r\n    /** HTML ID for associated input */\r\n    htmlFor: PropTypes.string.isRequired,\r\n\r\n    /** Label text */\r\n    label: PropTypes.string.isRequired,\r\n\r\n    /** Display asterisk after label if true */\r\n    required: PropTypes.bool\r\n}\r\n\r\nexport default Label;","import Label from \"../Label\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n//Exercise SelectInput CheckboxList .... yapılacak \r\n/*\r\n-Text area desteği ekle\r\n-Otomatik placeholder ekle\r\n-Validation Onblur ekle\r\n*/\r\n\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\r\nfunction TextInput({\r\n    htmlId,\r\n    name,\r\n    label,\r\n    type = \"text\",\r\n    required = false,\r\n    onChange,\r\n    onBlur,\r\n    placeholder,\r\n    value,\r\n    error,\r\n    children,\r\n    ...props\r\n}) {\r\n    return (\r\n        <div style={{ marginBottom: 16 }}>\r\n            <Label htmlFor={htmlId} label={label} required={required} />\r\n            <input\r\n                id={htmlId}\r\n                type={type}\r\n                name={name}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                style={error && { border: 'solid 1px red' }}\r\n                {...props}\r\n            />\r\n            {children}\r\n            {error && <div\r\n                className=\"error\"\r\n                style={{ color: 'red' }}\r\n            >{error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nTextInput.propTypes = {\r\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n    htmlId: PropTypes.string.isRequired,\r\n\r\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n    name: PropTypes.string.isRequired,\r\n\r\n    /** Input label */\r\n    label: PropTypes.string.isRequired,\r\n\r\n    /** Input type */\r\n    type: PropTypes.oneOf(['text', 'number', 'password']),\r\n\r\n    /** Mark label with asterisk if set to true */\r\n    required: PropTypes.bool,\r\n\r\n    /** Function to call onChange */\r\n    onChange: PropTypes.func.isRequired,\r\n\r\n    /** Function to call onBlur */\r\n    onBlur: PropTypes.func,\r\n\r\n    /** Placeholder to display when empty */\r\n    placeholder: PropTypes.string,\r\n\r\n    /** Value */\r\n    value: PropTypes.any,\r\n\r\n    /** String to display when error occurs */\r\n    error: PropTypes.string,\r\n\r\n    /** Child component to display next to the input */\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default TextInput;","export function getWidthAsPercentOfTotalWidth(percent, totalWidth) {\r\n    return parseInt(totalWidth * (percent / 100), 10);\r\n}","import PropTypes from \"prop-types\";\r\nimport { getWidthAsPercentOfTotalWidth } from \"../../utils/percentUtils\";\r\n\r\nfunction ProgressBar({ percent, width, height }) {\r\n\r\n    function getColor(percent) {\r\n        if (percent === 100) return 'green';\r\n        return percent > 50 ? 'lightgreen' : 'red';\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div style={{ border: 'solid 1px lightgray', width: width }}>\r\n            <div\r\n                aria-label=\"width\"\r\n                style={{\r\n                    width: getWidthAsPercentOfTotalWidth(percent, width),\r\n                    height,\r\n                    backgroundColor: getColor(percent)\r\n                }}\r\n            >\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nProgressBar.propTypes = {\r\n    /** Percent of progress completed */\r\n    percent: PropTypes.number.isRequired,\r\n\r\n    /** Bar Width */\r\n    width: PropTypes.number.isRequired,\r\n\r\n    /** Bar Height */\r\n    height: PropTypes.number\r\n}\r\n\r\nProgressBar.defaultProps = {\r\n    height: 5\r\n}\r\n\r\nexport default ProgressBar;","\r\n/** SVG Eye Icon */\r\nfunction EyeIcon() {\r\n    return (\r\n        <svg style={{ width: 20, height: 20 }} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\r\n            <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\r\n                <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\r\n                <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\r\n            </g></svg>\r\n    )\r\n}\r\n\r\nexport default EyeIcon;","import PropTypes from \"prop-types\";\r\nimport EyeIcon from \"../EyeIcon\";\r\nimport TextInput from \"../TextInput\";\r\nimport ProgressBar from \"../ProgressBar\";\r\nimport { useState } from \"react\";\r\n\r\nfunction PasswordInput({\r\n    htmlId,\r\n    name,\r\n    label,\r\n    onChange,\r\n    onBlur,\r\n    placeholder,\r\n    value,\r\n    error,\r\n    showVisibilityToggle,\r\n    quality,\r\n    minLength,\r\n    maxLength,\r\n    ...props\r\n}) {\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    function toggleShowPassword() {\r\n        return setShowPassword((prevState) => {\r\n            return !prevState\r\n        })\r\n    }\r\n\r\n    return (\r\n        <TextInput\r\n            htmlId={htmlId}\r\n            name={name}\r\n            label={label}\r\n            placeholder={placeholder}\r\n            type={showPassword ? 'text' : 'password'}\r\n            onChange={onChange}\r\n            onBlur={onBlur}\r\n            value={value}\r\n            maxLength={maxLength}\r\n            error={error}\r\n            required\r\n            {...props}\r\n        >\r\n            {showVisibilityToggle &&\r\n                <a\r\n                    aria-label=\"toggle\"\r\n                    onClick={toggleShowPassword}\r\n                    style={{ marginLeft: 5 }}\r\n                >\r\n                    <EyeIcon />\r\n                </a>\r\n            }\r\n\r\n            {\r\n                value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\r\n            }\r\n        </TextInput>\r\n    )\r\n}\r\n\r\nPasswordInput.propTypes = {\r\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n    htmlId: PropTypes.string.isRequired,\r\n\r\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n    name: PropTypes.string.isRequired,\r\n\r\n    /** Input label */\r\n    label: PropTypes.string.isRequired,\r\n\r\n    /** Function to call onChange */\r\n    onChange: PropTypes.func.isRequired,\r\n\r\n    /** Placeholder to display when empty */\r\n    placeholder: PropTypes.string,\r\n\r\n    /** Value */\r\n    value: PropTypes.any,\r\n\r\n    /** String to display when error occurs */\r\n    error: PropTypes.string,\r\n\r\n    /** Dislpay progressbar */\r\n    quality: PropTypes.number,\r\n\r\n    showVisibilityToggle: PropTypes.bool,\r\n\r\n    maxLength: PropTypes.number,\r\n    minLength: PropTypes.number\r\n};\r\n\r\nPasswordInput.defaultProps = {\r\n    maxLength: 50,\r\n    showVisibilityToggle: false,\r\n    label: 'Password',\r\n    name: \"default\"\r\n}\r\n\r\nexport default PasswordInput;","module.exports = /* eslint-disable */ [{\"name\":\"EyeIcon\",\"description\":\"SVG Eye Icon\",\"code\":\"\\r\\n/** SVG Eye Icon */\\r\\nfunction EyeIcon() {\\r\\n    return (\\r\\n        <svg style={{ width: 20, height: 20 }} xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 22 22\\\">\\r\\n            <g transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\" fill=\\\"#4d4d4d\\\">\\r\\n                <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\r\\n                <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\r\\n            </g></svg>\\r\\n    )\\r\\n}\\r\\n\\r\\nexport default EyeIcon;\",\"examples\":[{\"name\":\"ExampleEyeIcon\",\"description\":\"\",\"code\":\"import EyeIcon from \\\"ps-react/EyeIcon\\\";\\r\\n\\r\\nfunction ExampleEyeIcon() {\\r\\n    return <EyeIcon />\\r\\n}\\r\\n\\r\\nexport default ExampleEyeIcon;\"}]},{\"name\":\"HelloWorld\",\"description\":\"\",\"props\":{\"message\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Message to display\",\"defaultValue\":{\"value\":\"'World'\",\"computed\":false}}},\"code\":\"import PropTypes from \\\"prop-types\\\"\\r\\n\\r\\nfunction HelloWord({ message }) {\\r\\n    return <div>{message}</div>\\r\\n}\\r\\n\\r\\nHelloWord.propTypes = {\\r\\n    /** Message to display */\\r\\n    message: PropTypes.string\\r\\n};\\r\\n\\r\\nHelloWord.defaultProps = {\\r\\n    message: 'World'\\r\\n}\\r\\nexport default HelloWord;\",\"examples\":[{\"name\":\"ExampleHelloWorld\",\"description\":\"Custom HelloWorld Usings\",\"code\":\"import HelloWord from \\\"ps-react/HelloWorld\\\";\\r\\n\\r\\n/** Custom HelloWorld Usings */\\r\\nfunction ExampleHelloWorld() {\\r\\n    return <HelloWord message=\\\"PluralSight viewers\\\" />\\r\\n}\\r\\n\\r\\nexport default ExampleHelloWorld;\"}]},{\"name\":\"Label\",\"description\":\"Label with required field display,htmlFor,and block styling\",\"props\":{\"htmlFor\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"HTML ID for associated input\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Label text\"},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Display asterisk after label if true\"}},\"code\":\"import PropTypes from \\\"prop-types\\\";\\r\\n\\r\\n\\r\\n/** Label with required field display,htmlFor,and block styling */\\r\\nfunction Label({ htmlFor, label, required }) {\\r\\n    return (\\r\\n        <label\\r\\n            style={{\\r\\n                display: 'block'\\r\\n            }}\\r\\n            htmlFor={htmlFor}\\r\\n        >\\r\\n            {label}\\r\\n            {required && <span style={{ color: 'red' }}> *</span>}\\r\\n        </label>\\r\\n    )\\r\\n}\\r\\n\\r\\nLabel.propTypes = {\\r\\n    /** HTML ID for associated input */\\r\\n    htmlFor: PropTypes.string.isRequired,\\r\\n\\r\\n    /** Label text */\\r\\n    label: PropTypes.string.isRequired,\\r\\n\\r\\n    /** Display asterisk after label if true */\\r\\n    required: PropTypes.bool\\r\\n}\\r\\n\\r\\nexport default Label;\",\"examples\":[{\"name\":\"ExampleOptional\",\"description\":\"Optional Label\",\"code\":\"import Label from \\\"ps-react/Label\\\";\\r\\n\\r\\n/** Optional Label */\\r\\nfunction ExampleOptional() {\\r\\n    return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" />\\r\\n}\\r\\n\\r\\nexport default ExampleOptional;\"},{\"name\":\"ExampleRequired\",\"description\":\"Required Label\",\"code\":\"import Label from \\\"ps-react/Label\\\";\\r\\n\\r\\n/** Required Label */\\r\\nfunction ExampleRequired() {\\r\\n    return <Label htmlFor=\\\"name\\\" label=\\\"Name\\\" required />\\r\\n}\\r\\n\\r\\n\\r\\nexport default ExampleRequired;\"}]},{\"name\":\"PasswordInput\",\"description\":\"\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\",\"defaultValue\":{\"value\":\"\\\"default\\\"\",\"computed\":false}},\"label\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Input label\",\"defaultValue\":{\"value\":\"'Password'\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"quality\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Dislpay progressbar\"},\"showVisibilityToggle\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"maxLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"\",\"defaultValue\":{\"value\":\"50\",\"computed\":false}},\"minLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"\"}},\"code\":\"import PropTypes from \\\"prop-types\\\";\\r\\nimport EyeIcon from \\\"../EyeIcon\\\";\\r\\nimport TextInput from \\\"../TextInput\\\";\\r\\nimport ProgressBar from \\\"../ProgressBar\\\";\\r\\nimport { useState } from \\\"react\\\";\\r\\n\\r\\nfunction PasswordInput({\\r\\n    htmlId,\\r\\n    name,\\r\\n    label,\\r\\n    onChange,\\r\\n    onBlur,\\r\\n    placeholder,\\r\\n    value,\\r\\n    error,\\r\\n    showVisibilityToggle,\\r\\n    quality,\\r\\n    minLength,\\r\\n    maxLength,\\r\\n    ...props\\r\\n}) {\\r\\n    const [showPassword, setShowPassword] = useState(false);\\r\\n\\r\\n    function toggleShowPassword() {\\r\\n        return setShowPassword((prevState) => {\\r\\n            return !prevState\\r\\n        })\\r\\n    }\\r\\n\\r\\n    return (\\r\\n        <TextInput\\r\\n            htmlId={htmlId}\\r\\n            name={name}\\r\\n            label={label}\\r\\n            placeholder={placeholder}\\r\\n            type={showPassword ? 'text' : 'password'}\\r\\n            onChange={onChange}\\r\\n            onBlur={onBlur}\\r\\n            value={value}\\r\\n            maxLength={maxLength}\\r\\n            error={error}\\r\\n            required\\r\\n            {...props}\\r\\n        >\\r\\n            {showVisibilityToggle &&\\r\\n                <a\\r\\n                    onClick={toggleShowPassword}\\r\\n                    style={{ marginLeft: 5 }}\\r\\n                >\\r\\n                    <EyeIcon />\\r\\n                </a>\\r\\n            }\\r\\n            {<div>{showVisibilityToggle}</div>}\\r\\n            {\\r\\n                value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\\r\\n            }\\r\\n        </TextInput>\\r\\n    )\\r\\n}\\r\\n\\r\\nPasswordInput.propTypes = {\\r\\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\r\\n    htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\r\\n    name: PropTypes.string.isRequired,\\r\\n\\r\\n    /** Input label */\\r\\n    label: PropTypes.string.isRequired,\\r\\n\\r\\n    /** Function to call onChange */\\r\\n    onChange: PropTypes.func.isRequired,\\r\\n\\r\\n    /** Placeholder to display when empty */\\r\\n    placeholder: PropTypes.string,\\r\\n\\r\\n    /** Value */\\r\\n    value: PropTypes.any,\\r\\n\\r\\n    /** String to display when error occurs */\\r\\n    error: PropTypes.string,\\r\\n\\r\\n    /** Dislpay progressbar */\\r\\n    quality: PropTypes.number,\\r\\n\\r\\n    showVisibilityToggle: PropTypes.bool,\\r\\n\\r\\n    maxLength: PropTypes.number,\\r\\n    minLength: PropTypes.number\\r\\n};\\r\\n\\r\\nPasswordInput.defaultProps = {\\r\\n    maxLength: 50,\\r\\n    showVisibilityToggle: false,\\r\\n    label: 'Password',\\r\\n    name: \\\"default\\\"\\r\\n}\\r\\n\\r\\nexport default PasswordInput;\",\"examples\":[{\"name\":\"ExampleAllFeatures\",\"description\":\"\",\"code\":\"import PasswordInput from \\\"ps-react/PasswordInput\\\";\\r\\nimport { useState } from \\\"react\\\";\\r\\n\\r\\nfunction ExampleAllFeatures(props) {\\r\\n    const [pass, setPass] = useState('');\\r\\n\\r\\n    function getQuality() {\\r\\n        const length = pass.length;\\r\\n        return length > 10 ? 100 : length * 10;\\r\\n    }\\r\\n\\r\\n    return (\\r\\n        <div>\\r\\n            <PasswordInput\\r\\n                htmlId=\\\"pass-input-all-features\\\"\\r\\n                name=\\\"password\\\"\\r\\n                onChange={event => setPass(event.target.value)}\\r\\n                value={pass}\\r\\n                minLength={8}\\r\\n                placeholder=\\\"Enter Pass\\\"\\r\\n                showVisibilityToggle\\r\\n                quality={getQuality()}\\r\\n                {...props}\\r\\n\\r\\n            />\\r\\n        </div>\\r\\n    )\\r\\n}\\r\\n\\r\\nexport default ExampleAllFeatures;\"}]},{\"name\":\"ProgressBar\",\"description\":\"\",\"props\":{\"percent\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"Percent of progress completed\"},\"width\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"Bar Width\"},\"height\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Bar Height\",\"defaultValue\":{\"value\":\"5\",\"computed\":false}}},\"code\":\"import PropTypes from \\\"prop-types\\\";\\r\\n\\r\\nfunction ProgressBar({ percent, width, height }) {\\r\\n\\r\\n    function getColor(percent) {\\r\\n        if (percent === 100) return 'green';\\r\\n        return percent > 50 ? 'lightgreen' : 'red';\\r\\n    }\\r\\n\\r\\n    function getWidthAsPercentOfTotalWidth() {\\r\\n        return parseInt(width * (percent / 100), 10);\\r\\n    }\\r\\n\\r\\n    return (\\r\\n        <div style={{ border: 'solid 1px lightgray', width: width }}>\\r\\n            <div\\r\\n                style={{\\r\\n                    width: getWidthAsPercentOfTotalWidth(),\\r\\n                    height,\\r\\n                    backgroundColor: getColor(percent)\\r\\n                }}\\r\\n            >\\r\\n            </div>\\r\\n        </div>\\r\\n    )\\r\\n}\\r\\n\\r\\nProgressBar.propTypes = {\\r\\n    /** Percent of progress completed */\\r\\n    percent: PropTypes.number.isRequired,\\r\\n\\r\\n    /** Bar Width */\\r\\n    width: PropTypes.number.isRequired,\\r\\n\\r\\n    /** Bar Height */\\r\\n    height: PropTypes.number\\r\\n}\\r\\n\\r\\nProgressBar.defaultProps = {\\r\\n    height: 5\\r\\n}\\r\\n\\r\\nexport default ProgressBar;\",\"examples\":[{\"name\":\"Example10Percent\",\"description\":\"20% Progress\",\"code\":\"import ProgressBar from \\\"ps-react/ProgressBar\\\";\\r\\n\\r\\n/** 20% Progress */\\r\\nfunction Example10Percent() {\\r\\n    return <ProgressBar width={150} percent={20} />\\r\\n}\\r\\n\\r\\nexport default Example10Percent;\"},{\"name\":\"Example70Percent\",\"description\":\"70% Progress\",\"code\":\"import ProgressBar from \\\"ps-react/ProgressBar\\\";\\r\\n\\r\\n\\r\\n/** 70% Progress */\\r\\nfunction Example70Percent() {\\r\\n    return <ProgressBar width={150} percent={70} />\\r\\n}\\r\\n\\r\\nexport default Example70Percent;\"}]},{\"name\":\"RegistrationForm\",\"description\":\"\",\"props\":{\"confirmationMessage\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Message displayed upon successfull\",\"defaultValue\":{\"value\":\"'Thanks For Registration !'\",\"computed\":false}},\"onSubmit\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Called from submitted\"},\"minPasswordLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Min password length\",\"defaultValue\":{\"value\":\"8\",\"computed\":false}}},\"code\":\"import { useState } from \\\"react\\\";\\r\\nimport PasswordInput from \\\"../PasswordInput\\\";\\r\\nimport TextInput from \\\"../TextInput\\\";\\r\\nimport PropTypes, { func } from \\\"prop-types\\\";\\r\\n\\r\\nfunction RegistrationForm({\\r\\n    minPasswordLength = 8,\\r\\n    onSubmit,\\r\\n    confirmationMessage = 'Thanks For Registration !'\\r\\n}) {\\r\\n    const [state, setState] = useState({\\r\\n        user: { email: '', password: '' },\\r\\n        errors: {},\\r\\n        submitted: false,\\r\\n        loading: false\\r\\n    });\\r\\n\\r\\n\\r\\n    function onChange(e) {\\r\\n        const user = state.user;\\r\\n        user[e.target.name] = e.target.value;\\r\\n\\r\\n        setState(prevState => {\\r\\n            return {\\r\\n                ...prevState,\\r\\n                user\\r\\n            }\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function onBlur(e) {\\r\\n        return validate(state.user)\\r\\n    }\\r\\n\\r\\n    function passwordQuality(password) {\\r\\n        if (!password) return null;\\r\\n        if (password.length >= minPasswordLength) return 100;\\r\\n        const percentOfMinLength = parseInt(password.length / minPasswordLength * 100, 10);\\r\\n        return percentOfMinLength;\\r\\n    }\\r\\n\\r\\n    function validate({ email, password }) {\\r\\n        const errors = {};\\r\\n        if (email && email.length > 0) errors.email = 'Email required !';\\r\\n        if (password && password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\\r\\n        setState(prevState => {\\r\\n            return {\\r\\n                ...prevState,\\r\\n                errors\\r\\n            }\\r\\n        });\\r\\n\\r\\n        const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\\r\\n        return formIsValid;\\r\\n    }\\r\\n\\r\\n    async function onSubmitted() {\\r\\n        setState(prevState => {\\r\\n            return {\\r\\n                ...prevState,\\r\\n                loading: true,\\r\\n            }\\r\\n        })\\r\\n        const { user } = state;\\r\\n        const formIsValid = validate(user);\\r\\n        if (formIsValid) {\\r\\n            await onSubmit(user);\\r\\n            setState(prevState => {\\r\\n                return {\\r\\n                    ...prevState,\\r\\n                    submitted: true,\\r\\n                }\\r\\n            })\\r\\n        }\\r\\n        setState(prevState => {\\r\\n            return {\\r\\n                ...prevState,\\r\\n                loading: false,\\r\\n            }\\r\\n        })\\r\\n    }\\r\\n\\r\\n    return (\\r\\n        state.submitted\\r\\n            ? <h2>{confirmationMessage}</h2>\\r\\n            : <div>\\r\\n                <TextInput\\r\\n                    htmlId=\\\"registration-form-email\\\"\\r\\n                    name=\\\"email\\\"\\r\\n                    onChange={onChange}\\r\\n                    label=\\\"Email\\\"\\r\\n                    onBlur={onBlur}\\r\\n                    value={state.user.email}\\r\\n                    error={state.errors.email}\\r\\n                    required\\r\\n                />\\r\\n\\r\\n                <PasswordInput\\r\\n                    htmlId=\\\"registration-form-password\\\"\\r\\n                    name=\\\"password\\\"\\r\\n                    value={state.user.password}\\r\\n                    onChange={onChange}\\r\\n                    onBlur={onBlur}\\r\\n                    quality={passwordQuality(state.user.password)}\\r\\n                    showVisibilityToggle\\r\\n                    maxLength={50}\\r\\n                    error={state.errors.password}\\r\\n                />\\r\\n\\r\\n                <input type=\\\"submit\\\" value={state.loading ? `Loading....` : 'Register'} onClick={onSubmitted} />\\r\\n\\r\\n            </div>\\r\\n\\r\\n\\r\\n\\r\\n    )\\r\\n\\r\\n}\\r\\n\\r\\nRegistrationForm.propTypes = {\\r\\n    /** Message displayed upon successfull */\\r\\n    confirmationMessage: PropTypes.string,\\r\\n    /** Called from submitted */\\r\\n    onSubmit: PropTypes.func.isRequired,\\r\\n    /** Min password length */\\r\\n    minPasswordLength: PropTypes.number\\r\\n}\\r\\n\\r\\nexport default RegistrationForm;\",\"examples\":[{\"name\":\"ExampleRegistrationForm\",\"description\":\"\",\"code\":\"import RegistrationForm from \\\"ps-react/RegistrationForm/RegistrationForm\\\";\\r\\n\\r\\nfunction ExampleRegistrationForm() {\\r\\n    async function register(user) {\\r\\n        return new Promise((resolve, rejected) => {\\r\\n            return setTimeout(resolve, 3000);\\r\\n        })\\r\\n    }\\r\\n    return <RegistrationForm onSubmit={register} />\\r\\n}\\r\\n\\r\\nexport default ExampleRegistrationForm;\"}]},{\"name\":\"TextInput\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"onBlur\":{\"type\":{\"name\":\"func\"},\"required\":false,\"description\":\"Function to call onBlur\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import Label from \\\"ps-react/Label\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\n\\r\\n//Exercise SelectInput CheckboxList .... yapılacak \\r\\n/*\\r\\n-Text area desteği ekle\\r\\n-Otomatik placeholder ekle\\r\\n-Validation Onblur ekle\\r\\n*/\\r\\n\\r\\n\\r\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\r\\nfunction TextInput({\\r\\n    htmlId,\\r\\n    name,\\r\\n    label,\\r\\n    type = \\\"text\\\",\\r\\n    required = false,\\r\\n    onChange,\\r\\n    onBlur,\\r\\n    placeholder,\\r\\n    value,\\r\\n    error,\\r\\n    children,\\r\\n    ...props\\r\\n}) {\\r\\n    return (\\r\\n        <div style={{ marginBottom: 16 }}>\\r\\n            <Label htmlFor={htmlId} label={label} required={required} />\\r\\n            <input\\r\\n                id={htmlId}\\r\\n                type={type}\\r\\n                name={name}\\r\\n                placeholder={placeholder}\\r\\n                value={value}\\r\\n                onChange={onChange}\\r\\n                onBlur={onBlur}\\r\\n                style={error && { border: 'solid 1px red' }}\\r\\n                {...props}\\r\\n            />\\r\\n            {children}\\r\\n            {error && <div\\r\\n                className=\\\"error\\\"\\r\\n                style={{ color: 'red' }}\\r\\n            >{error}</div>}\\r\\n        </div>\\r\\n    )\\r\\n}\\r\\n\\r\\nTextInput.propTypes = {\\r\\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\r\\n    htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\r\\n    name: PropTypes.string.isRequired,\\r\\n\\r\\n    /** Input label */\\r\\n    label: PropTypes.string.isRequired,\\r\\n\\r\\n    /** Input type */\\r\\n    type: PropTypes.oneOf(['text', 'number', 'password']),\\r\\n\\r\\n    /** Mark label with asterisk if set to true */\\r\\n    required: PropTypes.bool,\\r\\n\\r\\n    /** Function to call onChange */\\r\\n    onChange: PropTypes.func.isRequired,\\r\\n\\r\\n    /** Function to call onBlur */\\r\\n    onBlur: PropTypes.func,\\r\\n\\r\\n    /** Placeholder to display when empty */\\r\\n    placeholder: PropTypes.string,\\r\\n\\r\\n    /** Value */\\r\\n    value: PropTypes.any,\\r\\n\\r\\n    /** String to display when error occurs */\\r\\n    error: PropTypes.string,\\r\\n\\r\\n    /** Child component to display next to the input */\\r\\n    children: PropTypes.node\\r\\n};\\r\\n\\r\\nexport default TextInput;\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"\",\"code\":\"import TextInput from \\\"ps-react/TextInput\\\";\\r\\n\\r\\nfunction ExampleOptional() {\\r\\n    return (\\r\\n        <TextInput\\r\\n            htmlId=\\\"example optional\\\"\\r\\n            label=\\\"First Name\\\"\\r\\n            name=\\\"firstName\\\"\\r\\n            required\\r\\n            error=\\\"First name is required\\\"\\r\\n            onChange={() => { }}\\r\\n        />\\r\\n    )\\r\\n}\\r\\n\\r\\n//Exercise SelectInput CheckboxList .... yapılacak \\r\\n\\r\\nexport default ExampleOptional\"},{\"name\":\"ExampleOptional\",\"description\":\"\",\"code\":\"import TextInput from \\\"ps-react/TextInput\\\";\\r\\n\\r\\nfunction ExampleOptional() {\\r\\n    return (\\r\\n        <TextInput\\r\\n            htmlId=\\\"example optional\\\"\\r\\n            label=\\\"First Name\\\"\\r\\n            name=\\\"firstName\\\"\\r\\n            required\\r\\n            onChange={() => { }}\\r\\n        />\\r\\n    )\\r\\n}\\r\\n\\r\\nexport default ExampleOptional\"}]},{\"name\":\"TextInputBEM\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"onBlur\":{\"type\":{\"name\":\"func\"},\"required\":false,\"description\":\"Function to call onBlur\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import Label from \\\"ps-react/Label\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\n\\r\\n//Exercise SelectInput CheckboxList .... yapılacak \\r\\n/*\\r\\n-Text area desteği ekle\\r\\n-Otomatik placeholder ekle\\r\\n-Validation Onblur ekle\\r\\n*/\\r\\n\\r\\n\\r\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\r\\nfunction TextInputBEM({\\r\\n    htmlId,\\r\\n    name,\\r\\n    label,\\r\\n    type = \\\"text\\\",\\r\\n    required = false,\\r\\n    onChange,\\r\\n    onBlur,\\r\\n    placeholder,\\r\\n    value,\\r\\n    error,\\r\\n    children,\\r\\n    ...props\\r\\n}) {\\r\\n    return (\\r\\n        <div className=\\\"textinput\\\">\\r\\n            <Label htmlFor={htmlId} label={label} required={required} />\\r\\n            <input\\r\\n                id={htmlId}\\r\\n                type={type}\\r\\n                name={name}\\r\\n                placeholder={placeholder}\\r\\n                value={value}\\r\\n                onChange={onChange}\\r\\n                onBlur={onBlur}\\r\\n                className={error && 'textinput__input--state-error'}\\r\\n                {...props}\\r\\n            />\\r\\n            {children}\\r\\n            {error &&\\r\\n                <div className=\\\"textinput__error\\\"\\r\\n                >{error}</div>}\\r\\n        </div>\\r\\n    )\\r\\n}\\r\\n\\r\\nTextInputBEM.propTypes = {\\r\\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\r\\n    htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\r\\n    name: PropTypes.string.isRequired,\\r\\n\\r\\n    /** Input label */\\r\\n    label: PropTypes.string.isRequired,\\r\\n\\r\\n    /** Input type */\\r\\n    type: PropTypes.oneOf(['text', 'number', 'password']),\\r\\n\\r\\n    /** Mark label with asterisk if set to true */\\r\\n    required: PropTypes.bool,\\r\\n\\r\\n    /** Function to call onChange */\\r\\n    onChange: PropTypes.func.isRequired,\\r\\n\\r\\n    /** Function to call onBlur */\\r\\n    onBlur: PropTypes.func,\\r\\n\\r\\n    /** Placeholder to display when empty */\\r\\n    placeholder: PropTypes.string,\\r\\n\\r\\n    /** Value */\\r\\n    value: PropTypes.any,\\r\\n\\r\\n    /** String to display when error occurs */\\r\\n    error: PropTypes.string,\\r\\n\\r\\n    /** Child component to display next to the input */\\r\\n    children: PropTypes.node\\r\\n};\\r\\n\\r\\nexport default TextInputBEM;\",\"examples\":[{\"name\":\"ExampleTextInputBem\",\"description\":\"With Error Text\",\"code\":\"import TextInputBEM from \\\"ps-react/TextInputBEM\\\";\\r\\n\\r\\n/** With Error Text */\\r\\nfunction ExampleOptional() {\\r\\n    return (\\r\\n        <TextInputBEM\\r\\n            htmlId=\\\"example optional\\\"\\r\\n            label=\\\"First Name\\\"\\r\\n            name=\\\"firstName\\\"\\r\\n            required\\r\\n            error=\\\"First name is required\\\"\\r\\n            onChange={() => { }}\\r\\n        />\\r\\n    )\\r\\n}\\r\\n\\r\\n//Exercise SelectInput CheckboxList .... yapılacak \\r\\n\\r\\nexport default ExampleOptional\"}]},{\"name\":\"TextInputCSSModules\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"onBlur\":{\"type\":{\"name\":\"func\"},\"required\":false,\"description\":\"Function to call onBlur\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import Label from \\\"ps-react/Label\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\nimport styles from \\\"./textInput.css\\\";\\r\\n//Exercise SelectInput CheckboxList .... yapılacak \\r\\n/*\\r\\n-Text area desteği ekle\\r\\n-Otomatik placeholder ekle\\r\\n-Validation Onblur ekle\\r\\n*/\\r\\n\\r\\n\\r\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\r\\nfunction TextInputCSSModules({\\r\\n    htmlId,\\r\\n    name,\\r\\n    label,\\r\\n    type = \\\"text\\\",\\r\\n    required = false,\\r\\n    onChange,\\r\\n    onBlur,\\r\\n    placeholder,\\r\\n    value,\\r\\n    error,\\r\\n    children,\\r\\n    ...props\\r\\n}) {\\r\\n    console.log(styles)\\r\\n    return (\\r\\n        <div className={styles.fieldset}>\\r\\n            <Label htmlFor={htmlId} label={label} required={required} />\\r\\n            <input\\r\\n                id={htmlId}\\r\\n                type={type}\\r\\n                name={name}\\r\\n                placeholder={placeholder}\\r\\n                value={value}\\r\\n                onChange={onChange}\\r\\n                onBlur={onBlur}\\r\\n                className={error && styles.inputError}\\r\\n                {...props}\\r\\n            />\\r\\n            {children}\\r\\n            {error && <div\\r\\n                className={styles.error}\\r\\n            >{error}</div>}\\r\\n        </div>\\r\\n    )\\r\\n}\\r\\n\\r\\nTextInputCSSModules.propTypes = {\\r\\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\r\\n    htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\r\\n    name: PropTypes.string.isRequired,\\r\\n\\r\\n    /** Input label */\\r\\n    label: PropTypes.string.isRequired,\\r\\n\\r\\n    /** Input type */\\r\\n    type: PropTypes.oneOf(['text', 'number', 'password']),\\r\\n\\r\\n    /** Mark label with asterisk if set to true */\\r\\n    required: PropTypes.bool,\\r\\n\\r\\n    /** Function to call onChange */\\r\\n    onChange: PropTypes.func.isRequired,\\r\\n\\r\\n    /** Function to call onBlur */\\r\\n    onBlur: PropTypes.func,\\r\\n\\r\\n    /** Placeholder to display when empty */\\r\\n    placeholder: PropTypes.string,\\r\\n\\r\\n    /** Value */\\r\\n    value: PropTypes.any,\\r\\n\\r\\n    /** String to display when error occurs */\\r\\n    error: PropTypes.string,\\r\\n\\r\\n    /** Child component to display next to the input */\\r\\n    children: PropTypes.node\\r\\n};\\r\\n\\r\\nexport default TextInputCSSModules;\",\"examples\":[{\"name\":\"ExampleCSS\",\"description\":\"\",\"code\":\"import TextInputCSSModules from \\\"ps-react/TextInputCSSModules\\\";\\r\\n\\r\\nfunction ExampleCSS() {\\r\\n    return (\\r\\n        <TextInputCSSModules\\r\\n            htmlId=\\\"example optional\\\"\\r\\n            label=\\\"First Name\\\"\\r\\n            name=\\\"firstName\\\"\\r\\n            required\\r\\n            error=\\\"First name is required\\\"\\r\\n            onChange={() => { }}\\r\\n        />\\r\\n    )\\r\\n}\\r\\n\\r\\n//Exercise SelectInput CheckboxList .... yapılacak \\r\\n\\r\\nexport default ExampleCSS\"}]},{\"name\":\"TextInputStyledComponent\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"onBlur\":{\"type\":{\"name\":\"func\"},\"required\":false,\"description\":\"Function to call onBlur\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import Label from \\\"ps-react/Label\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\nimport styled from \\\"styled-components\\\";\\r\\n\\r\\n//Exercise SelectInput CheckboxList .... yapılacak \\r\\n/*\\r\\n-Text area desteği ekle\\r\\n-Otomatik placeholder ekle\\r\\n-Validation Onblur ekle\\r\\n*/\\r\\n\\r\\n\\r\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\r\\nfunction TextInputStyledComponent({\\r\\n    htmlId,\\r\\n    name,\\r\\n    label,\\r\\n    type = \\\"text\\\",\\r\\n    required = false,\\r\\n    onChange,\\r\\n    onBlur,\\r\\n    placeholder,\\r\\n    value,\\r\\n    error,\\r\\n    children,\\r\\n    ...props\\r\\n}) {\\r\\n    const Error = styled.div`\\r\\n      color:red;\\r\\n    `;\\r\\n    const Input = styled.input`\\r\\n        border: ${error && 'solid 1px red '};\\r\\n    `;\\r\\n    const Fieldset = styled.div`\\r\\n       margin-bottom: 16px;\\r\\n    `;\\r\\n\\r\\n\\r\\n    return (\\r\\n        <Fieldset>\\r\\n            <Label htmlFor={htmlId} label={label} required={required} />\\r\\n            <Input\\r\\n                id={htmlId}\\r\\n                type={type}\\r\\n                name={name}\\r\\n                placeholder={placeholder}\\r\\n                value={value}\\r\\n                onChange={onChange}\\r\\n                onBlur={onBlur}\\r\\n                {...props}\\r\\n            />\\r\\n            {children}\\r\\n            {error && <Error\\r\\n                className=\\\"error\\\"\\r\\n\\r\\n            >{error}</Error>}\\r\\n        </Fieldset>\\r\\n    )\\r\\n}\\r\\n\\r\\nTextInputStyledComponent.propTypes = {\\r\\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\r\\n    htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\r\\n    name: PropTypes.string.isRequired,\\r\\n\\r\\n    /** Input label */\\r\\n    label: PropTypes.string.isRequired,\\r\\n\\r\\n    /** Input type */\\r\\n    type: PropTypes.oneOf(['text', 'number', 'password']),\\r\\n\\r\\n    /** Mark label with asterisk if set to true */\\r\\n    required: PropTypes.bool,\\r\\n\\r\\n    /** Function to call onChange */\\r\\n    onChange: PropTypes.func.isRequired,\\r\\n\\r\\n    /** Function to call onBlur */\\r\\n    onBlur: PropTypes.func,\\r\\n\\r\\n    /** Placeholder to display when empty */\\r\\n    placeholder: PropTypes.string,\\r\\n\\r\\n    /** Value */\\r\\n    value: PropTypes.any,\\r\\n\\r\\n    /** String to display when error occurs */\\r\\n    error: PropTypes.string,\\r\\n\\r\\n    /** Child component to display next to the input */\\r\\n    children: PropTypes.node\\r\\n};\\r\\n\\r\\nexport default TextInputStyledComponent;\",\"examples\":[{\"name\":\"ExampleStyledComponent\",\"description\":\"\",\"code\":\"import TextInputStyledComponent from \\\"ps-react/TextInputStyledComponent\\\";\\r\\n\\r\\nfunction ExampleStyled() {\\r\\n    return (\\r\\n        <TextInputStyledComponent\\r\\n            htmlId=\\\"example-optional\\\"\\r\\n            label=\\\"First Name\\\"\\r\\n            name=\\\"firstName\\\"\\r\\n            required\\r\\n            error=\\\"First name is required\\\"\\r\\n            onChange={() => { }}\\r\\n        />\\r\\n    )\\r\\n}\\r\\n\\r\\n//Exercise SelectInput CheckboxList .... yapılacak \\r\\n\\r\\nexport default ExampleStyled\"}]}]","import EyeIcon from \"ps-react/EyeIcon\";\r\n\r\nfunction ExampleEyeIcon() {\r\n    return <EyeIcon />\r\n}\r\n\r\nexport default ExampleEyeIcon;","import Label from \"ps-react/Label\";\r\n\r\n/** Optional Label */\r\nfunction ExampleOptional() {\r\n    return <Label htmlFor=\"test\" label=\"test\" />\r\n}\r\n\r\nexport default ExampleOptional;","import Label from \"ps-react/Label\";\r\n\r\n/** Required Label */\r\nfunction ExampleRequired() {\r\n    return <Label htmlFor=\"name\" label=\"Name\" required />\r\n}\r\n\r\n\r\nexport default ExampleRequired;","import PasswordInput from \"ps-react/PasswordInput\";\r\nimport { useState } from \"react\";\r\n\r\nfunction ExampleAllFeatures(props) {\r\n    const [pass, setPass] = useState('');\r\n\r\n    function getQuality() {\r\n        const length = pass.length;\r\n        return length > 10 ? 100 : length * 10;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <PasswordInput\r\n                htmlId=\"pass-input-all-features\"\r\n                name=\"password\"\r\n                onChange={event => setPass(event.target.value)}\r\n                value={pass}\r\n                minLength={8}\r\n                placeholder=\"Enter Pass\"\r\n                showVisibilityToggle\r\n                quality={getQuality()}\r\n                {...props}\r\n\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ExampleAllFeatures;","import ProgressBar from \"ps-react/ProgressBar\";\r\n\r\n/** 20% Progress */\r\nfunction Example10Percent() {\r\n    return <ProgressBar width={150} percent={20} />\r\n}\r\n\r\nexport default Example10Percent;","import ProgressBar from \"ps-react/ProgressBar\";\r\n\r\n\r\n/** 70% Progress */\r\nfunction Example70Percent() {\r\n    return <ProgressBar width={150} percent={70} />\r\n}\r\n\r\nexport default Example70Percent;","import TextInput from \"ps-react/TextInput\";\r\n\r\nfunction ExampleOptional() {\r\n    return (\r\n        <TextInput\r\n            htmlId=\"example optional\"\r\n            label=\"First Name\"\r\n            name=\"firstName\"\r\n            required\r\n            error=\"First name is required\"\r\n            onChange={() => { }}\r\n        />\r\n    )\r\n}\r\n\r\n//Exercise SelectInput CheckboxList .... yapılacak \r\n\r\nexport default ExampleOptional","import TextInput from \"ps-react/TextInput\";\r\n\r\nfunction ExampleOptional() {\r\n    return (\r\n        <TextInput\r\n            htmlId=\"example optional\"\r\n            label=\"First Name\"\r\n            name=\"firstName\"\r\n            required\r\n            onChange={() => { }}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ExampleOptional","import PropTypes from \"prop-types\"\r\n\r\nfunction HelloWord({ message }) {\r\n    return <div>{message}</div>\r\n}\r\n\r\nHelloWord.propTypes = {\r\n    /** Message to display */\r\n    message: PropTypes.string\r\n};\r\n\r\nHelloWord.defaultProps = {\r\n    message: 'World'\r\n}\r\nexport default HelloWord;","import HelloWord from \"ps-react/HelloWorld\";\r\n\r\n/** Custom HelloWorld Usings */\r\nfunction ExampleHelloWorld() {\r\n    return <HelloWord message=\"PluralSight viewers\" />\r\n}\r\n\r\nexport default ExampleHelloWorld;","import Label from \"ps-react/Label\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n//Exercise SelectInput CheckboxList .... yapılacak \r\n/*\r\n-Text area desteği ekle\r\n-Otomatik placeholder ekle\r\n-Validation Onblur ekle\r\n*/\r\n\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\r\nfunction TextInputBEM({\r\n    htmlId,\r\n    name,\r\n    label,\r\n    type = \"text\",\r\n    required = false,\r\n    onChange,\r\n    onBlur,\r\n    placeholder,\r\n    value,\r\n    error,\r\n    children,\r\n    ...props\r\n}) {\r\n    return (\r\n        <div className=\"textinput\">\r\n            <Label htmlFor={htmlId} label={label} required={required} />\r\n            <input\r\n                id={htmlId}\r\n                type={type}\r\n                name={name}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                className={error && 'textinput__input--state-error'}\r\n                {...props}\r\n            />\r\n            {children}\r\n            {error &&\r\n                <div className=\"textinput__error\"\r\n                >{error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nTextInputBEM.propTypes = {\r\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n    htmlId: PropTypes.string.isRequired,\r\n\r\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n    name: PropTypes.string.isRequired,\r\n\r\n    /** Input label */\r\n    label: PropTypes.string.isRequired,\r\n\r\n    /** Input type */\r\n    type: PropTypes.oneOf(['text', 'number', 'password']),\r\n\r\n    /** Mark label with asterisk if set to true */\r\n    required: PropTypes.bool,\r\n\r\n    /** Function to call onChange */\r\n    onChange: PropTypes.func.isRequired,\r\n\r\n    /** Function to call onBlur */\r\n    onBlur: PropTypes.func,\r\n\r\n    /** Placeholder to display when empty */\r\n    placeholder: PropTypes.string,\r\n\r\n    /** Value */\r\n    value: PropTypes.any,\r\n\r\n    /** String to display when error occurs */\r\n    error: PropTypes.string,\r\n\r\n    /** Child component to display next to the input */\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default TextInputBEM;","import TextInputBEM from \"ps-react/TextInputBEM\";\r\n\r\n/** With Error Text */\r\nfunction ExampleOptional() {\r\n    return (\r\n        <TextInputBEM\r\n            htmlId=\"example optional\"\r\n            label=\"First Name\"\r\n            name=\"firstName\"\r\n            required\r\n            error=\"First name is required\"\r\n            onChange={() => { }}\r\n        />\r\n    )\r\n}\r\n\r\n//Exercise SelectInput CheckboxList .... yapılacak \r\n\r\nexport default ExampleOptional","import Label from \"ps-react/Label\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./textInput.css\";\r\n//Exercise SelectInput CheckboxList .... yapılacak \r\n/*\r\n-Text area desteği ekle\r\n-Otomatik placeholder ekle\r\n-Validation Onblur ekle\r\n*/\r\n\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\r\nfunction TextInputCSSModules({\r\n    htmlId,\r\n    name,\r\n    label,\r\n    type = \"text\",\r\n    required = false,\r\n    onChange,\r\n    onBlur,\r\n    placeholder,\r\n    value,\r\n    error,\r\n    children,\r\n    ...props\r\n}) {\r\n    console.log(styles)\r\n    return (\r\n        <div className={styles.fieldset}>\r\n            <Label htmlFor={htmlId} label={label} required={required} />\r\n            <input\r\n                id={htmlId}\r\n                type={type}\r\n                name={name}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                className={error && styles.inputError}\r\n                {...props}\r\n            />\r\n            {children}\r\n            {error && <div\r\n                className={styles.error}\r\n            >{error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nTextInputCSSModules.propTypes = {\r\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n    htmlId: PropTypes.string.isRequired,\r\n\r\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n    name: PropTypes.string.isRequired,\r\n\r\n    /** Input label */\r\n    label: PropTypes.string.isRequired,\r\n\r\n    /** Input type */\r\n    type: PropTypes.oneOf(['text', 'number', 'password']),\r\n\r\n    /** Mark label with asterisk if set to true */\r\n    required: PropTypes.bool,\r\n\r\n    /** Function to call onChange */\r\n    onChange: PropTypes.func.isRequired,\r\n\r\n    /** Function to call onBlur */\r\n    onBlur: PropTypes.func,\r\n\r\n    /** Placeholder to display when empty */\r\n    placeholder: PropTypes.string,\r\n\r\n    /** Value */\r\n    value: PropTypes.any,\r\n\r\n    /** String to display when error occurs */\r\n    error: PropTypes.string,\r\n\r\n    /** Child component to display next to the input */\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default TextInputCSSModules;","import TextInputCSSModules from \"ps-react/TextInputCSSModules\";\r\n\r\nfunction ExampleCSS() {\r\n    return (\r\n        <TextInputCSSModules\r\n            htmlId=\"example optional\"\r\n            label=\"First Name\"\r\n            name=\"firstName\"\r\n            required\r\n            error=\"First name is required\"\r\n            onChange={() => { }}\r\n        />\r\n    )\r\n}\r\n\r\n//Exercise SelectInput CheckboxList .... yapılacak \r\n\r\nexport default ExampleCSS","import Label from \"ps-react/Label\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\n//Exercise SelectInput CheckboxList .... yapılacak \r\n/*\r\n-Text area desteği ekle\r\n-Otomatik placeholder ekle\r\n-Validation Onblur ekle\r\n*/\r\n\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\r\nfunction TextInputStyledComponent({\r\n    htmlId,\r\n    name,\r\n    label,\r\n    type = \"text\",\r\n    required = false,\r\n    onChange,\r\n    onBlur,\r\n    placeholder,\r\n    value,\r\n    error,\r\n    children,\r\n    ...props\r\n}) {\r\n    const Error = styled.div`\r\n      color:red;\r\n    `;\r\n    const Input = styled.input`\r\n        border: ${error && 'solid 1px red '};\r\n    `;\r\n    const Fieldset = styled.div`\r\n       margin-bottom: 16px;\r\n    `;\r\n\r\n\r\n    return (\r\n        <Fieldset>\r\n            <Label htmlFor={htmlId} label={label} required={required} />\r\n            <Input\r\n                id={htmlId}\r\n                type={type}\r\n                name={name}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                {...props}\r\n            />\r\n            {children}\r\n            {error && <Error\r\n                className=\"error\"\r\n\r\n            >{error}</Error>}\r\n        </Fieldset>\r\n    )\r\n}\r\n\r\nTextInputStyledComponent.propTypes = {\r\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n    htmlId: PropTypes.string.isRequired,\r\n\r\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n    name: PropTypes.string.isRequired,\r\n\r\n    /** Input label */\r\n    label: PropTypes.string.isRequired,\r\n\r\n    /** Input type */\r\n    type: PropTypes.oneOf(['text', 'number', 'password']),\r\n\r\n    /** Mark label with asterisk if set to true */\r\n    required: PropTypes.bool,\r\n\r\n    /** Function to call onChange */\r\n    onChange: PropTypes.func.isRequired,\r\n\r\n    /** Function to call onBlur */\r\n    onBlur: PropTypes.func,\r\n\r\n    /** Placeholder to display when empty */\r\n    placeholder: PropTypes.string,\r\n\r\n    /** Value */\r\n    value: PropTypes.any,\r\n\r\n    /** String to display when error occurs */\r\n    error: PropTypes.string,\r\n\r\n    /** Child component to display next to the input */\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default TextInputStyledComponent;","import TextInputStyledComponent from \"ps-react/TextInputStyledComponent\";\r\n\r\nfunction ExampleStyled() {\r\n    return (\r\n        <TextInputStyledComponent\r\n            htmlId=\"example-optional\"\r\n            label=\"First Name\"\r\n            name=\"firstName\"\r\n            required\r\n            error=\"First name is required\"\r\n            onChange={() => { }}\r\n        />\r\n    )\r\n}\r\n\r\n//Exercise SelectInput CheckboxList .... yapılacak \r\n\r\nexport default ExampleStyled","import { useState } from \"react\";\r\nimport PasswordInput from \"../PasswordInput\";\r\nimport TextInput from \"../TextInput\";\r\nimport PropTypes, { func } from \"prop-types\";\r\n\r\nfunction RegistrationForm({\r\n    minPasswordLength = 8,\r\n    onSubmit,\r\n    confirmationMessage = 'Thanks For Registration !'\r\n}) {\r\n    const [state, setState] = useState({\r\n        user: { email: '', password: '' },\r\n        errors: {},\r\n        submitted: false,\r\n        loading: false\r\n    });\r\n\r\n\r\n    function onChange(e) {\r\n        const user = state.user;\r\n        user[e.target.name] = e.target.value;\r\n\r\n        setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                user\r\n            }\r\n        });\r\n    }\r\n\r\n    function onBlur(e) {\r\n        return validate(state.user)\r\n    }\r\n\r\n    function passwordQuality(password) {\r\n        if (!password) return null;\r\n        if (password.length >= minPasswordLength) return 100;\r\n        const percentOfMinLength = parseInt(password.length / minPasswordLength * 100, 10);\r\n        return percentOfMinLength;\r\n    }\r\n\r\n    function validate({ email, password }) {\r\n        const errors = {};\r\n        if (email && email.length > 0) errors.email = 'Email required !';\r\n        if (password && password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\r\n        setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                errors\r\n            }\r\n        });\r\n\r\n        const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\r\n        return formIsValid;\r\n    }\r\n\r\n    async function onSubmitted() {\r\n        setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                loading: true,\r\n            }\r\n        })\r\n        const { user } = state;\r\n        const formIsValid = validate(user);\r\n        if (formIsValid) {\r\n            await onSubmit(user);\r\n            setState(prevState => {\r\n                return {\r\n                    ...prevState,\r\n                    submitted: true,\r\n                }\r\n            })\r\n        }\r\n        setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                loading: false,\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        state.submitted\r\n            ? <h2>{confirmationMessage}</h2>\r\n            : <div>\r\n                <TextInput\r\n                    htmlId=\"registration-form-email\"\r\n                    name=\"email\"\r\n                    onChange={onChange}\r\n                    label=\"Email\"\r\n                    onBlur={onBlur}\r\n                    value={state.user.email}\r\n                    error={state.errors.email}\r\n                    required\r\n                />\r\n\r\n                <PasswordInput\r\n                    htmlId=\"registration-form-password\"\r\n                    name=\"password\"\r\n                    value={state.user.password}\r\n                    onChange={onChange}\r\n                    onBlur={onBlur}\r\n                    quality={passwordQuality(state.user.password)}\r\n                    showVisibilityToggle\r\n                    maxLength={50}\r\n                    error={state.errors.password}\r\n                />\r\n\r\n                <input type=\"submit\" value={state.loading ? `Loading....` : 'Register'} onClick={onSubmitted} />\r\n\r\n            </div>\r\n\r\n\r\n\r\n    )\r\n\r\n}\r\n\r\nRegistrationForm.propTypes = {\r\n    /** Message displayed upon successfull */\r\n    confirmationMessage: PropTypes.string,\r\n    /** Called from submitted */\r\n    onSubmit: PropTypes.func.isRequired,\r\n    /** Min password length */\r\n    minPasswordLength: PropTypes.number\r\n}\r\n\r\nexport default RegistrationForm;","import RegistrationForm from \"ps-react/RegistrationForm/RegistrationForm\";\r\n\r\nfunction ExampleRegistrationForm() {\r\n    async function register(user) {\r\n        return new Promise((resolve, rejected) => {\r\n            return setTimeout(resolve, 3000);\r\n        })\r\n    }\r\n    return <RegistrationForm onSubmit={register} />\r\n}\r\n\r\nexport default ExampleRegistrationForm;","var map = {\n\t\"./EyeIcon/ExampleEyeIcon\": 21,\n\t\"./EyeIcon/ExampleEyeIcon.js\": 21,\n\t\"./HelloWorld/ExampleHelloWorld\": 29,\n\t\"./HelloWorld/ExampleHelloWorld.js\": 29,\n\t\"./Label/ExampleOptional\": 22,\n\t\"./Label/ExampleOptional.js\": 22,\n\t\"./Label/ExampleRequired\": 23,\n\t\"./Label/ExampleRequired.js\": 23,\n\t\"./PasswordInput/ExampleAllFeatures\": 24,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 24,\n\t\"./ProgressBar/Example10Percent\": 25,\n\t\"./ProgressBar/Example10Percent.js\": 25,\n\t\"./ProgressBar/Example70Percent\": 26,\n\t\"./ProgressBar/Example70Percent.js\": 26,\n\t\"./RegistrationForm/ExampleRegistrationForm\": 33,\n\t\"./RegistrationForm/ExampleRegistrationForm.js\": 33,\n\t\"./TextInput/ExampleError\": 27,\n\t\"./TextInput/ExampleError.js\": 27,\n\t\"./TextInput/ExampleOptional\": 28,\n\t\"./TextInput/ExampleOptional.js\": 28,\n\t\"./TextInputBEM/ExampleTextInputBem\": 30,\n\t\"./TextInputBEM/ExampleTextInputBem.js\": 30,\n\t\"./TextInputCSSModules/ExampleCSS\": 31,\n\t\"./TextInputCSSModules/ExampleCSS.js\": 31,\n\t\"./TextInputStyledComponent/ExampleStyledComponent\": 32,\n\t\"./TextInputStyledComponent/ExampleStyledComponent.js\": 32\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 45;","import PropTypes from \"prop-types\"\r\n\r\nfunction Navigation({ components }) {\r\n    return (\r\n        <ul className=\"navigation\">\r\n            {\r\n                components.map(name => {\r\n                    return (\r\n                        <li key={name}>\r\n                            <a href={`#${name}`}>{name}</a>\r\n                        </li>\r\n                    )\r\n                })\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n\r\nNavigation.propTypes = {\r\n    components: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Navigation;","import PropTypes from 'prop-types';\r\nimport { useEffect } from 'react';\r\n\r\nimport hljs from 'highlight.js/lib/highlight'\r\nimport javascript from 'highlight.js/lib/languages/javascript'\r\n\r\nfunction CodeExample(props) {\r\n    useEffect(() => {\r\n        hljs.registerLanguage('javascript', javascript);\r\n        hljs.highlightBlock(CodeExample);\r\n    }, [])\r\n\r\n    return (\r\n        <pre ref={ref => { CodeExample = ref }}>\r\n            <code>\r\n                {props.children}\r\n            </code>\r\n        </pre>\r\n    )\r\n}\r\n\r\nCodeExample.propTypes = {\r\n    children: PropTypes.string.isRequired\r\n}\r\n\r\nexport default CodeExample;","import PropTypes from \"prop-types\";\r\nimport { useState } from \"react\";\r\nimport CodeExample from './CodeExample';\r\n\r\nfunction Example(props) {\r\n    const [showCode, setShowCode] = useState(false);\r\n    const { code, description, name } = props.example;\r\n    const ExampleComponent = require(`./examples/${props.componentName}/${name}`).default;\r\n\r\n    function toggleCode(e) {\r\n        e.preventDefault();\r\n        setShowCode(() => !showCode)\r\n    }\r\n\r\n    return (\r\n        <div className=\"example\">\r\n            {description && <h4>{description}</h4>}\r\n\r\n            <ExampleComponent />\r\n\r\n            <p>\r\n                <a href=\"\" onClick={toggleCode}>\r\n                    {showCode ? \"Hide\" : \"Show\"} Code\r\n                </a>\r\n            </p>\r\n\r\n            {showCode && <CodeExample>{code}</CodeExample>}\r\n        </div>\r\n    )\r\n}\r\n\r\nExample.propTypes = {\r\n    example: PropTypes.object.isRequired,\r\n    componentName: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Example","import PropTypes from 'prop-types';\r\n\r\nfunction Props({ props }) {\r\n    return (\r\n        <table className=\"props\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Description</th>\r\n                    <th>Type</th>\r\n                    <th>Default</th>\r\n                    <th>Required</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                    Object.keys(props).map(key => {\r\n                        return (\r\n                            <tr key={key}>\r\n                                <td>{key}</td>\r\n                                <td>{props[key].description}</td>\r\n                                <td>{props[key].type.name}</td>\r\n                                <td>{props[key].defaultValue && props[key].defaultValue.value}</td>\r\n                                <td>{props[key].required && \"X\"}</td>\r\n                            </tr>\r\n                        );\r\n                    })\r\n                }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nProps.propTypes = {\r\n    props: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Props;","import PropTypes from \"prop-types\";\r\nimport Example from \"./Example\";\r\nimport Props from \"./Props\";\r\n\r\n\r\nfunction ComponentPage({ component }) {\r\n    const { name, description, props, examples } = component;\r\n\r\n    return (\r\n        <div className=\"componentpage\">\r\n            <h2>{name}</h2>\r\n            <p>{description}</p>\r\n            <h3>Example {examples.length > 1 && 's'}</h3>\r\n            {\r\n                examples.length > 0 ?\r\n                    examples.map(example =>\r\n                        <Example key={example.code}\r\n                            example={example}\r\n                            componentName={name}\r\n                        />\r\n                    ) : 'No examples exist.'\r\n            }\r\n            <h3>Props</h3>\r\n            {\r\n                props ?\r\n                    <Props props={props} />\r\n                    : 'This component accepts no props.'\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nComponentPage.propTypes = {\r\n    component: PropTypes.object.isRequired\r\n}\r\n\r\nexport default ComponentPage;","import { useState, useEffect } from \"react\";\r\nimport Navigation from \"./Navigation\";\r\nimport ComponentPage from \"./ComponentPage\";\r\nimport componentData from \"../../config/componentData\";\r\n\r\nfunction Docs(props) {\r\n    var [route, setRoute] = useState(window.location.hash.substr(1));\r\n\r\n    function routeControl() {\r\n        return setRoute(() => route = window.location.hash.substr(1));\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('hashchange', routeControl)\r\n        return () => window.removeEventListener('hashchange', routeControl);\r\n    }, [route, routeControl])\r\n\r\n    const component = route ? componentData.filter(\r\n        component => component.name === route\r\n    )[0] : componentData[0];\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Navigation components={componentData.map(component => component.name)} />\r\n            <ComponentPage component={component} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Docs;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Docs from './docs/Docs';\nimport reportWebVitals from './reportWebVitals';\nimport \"../node_modules/highlight.js/styles/ocean.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Docs />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}